{"version":3,"sources":["manager.js","cryptofunctions.js","passoff.js","temporaryphrasestore.js"],"names":["clearPassword","hideElement","passwordCard","password","textContent","zeroVar","setPasswordButton","trimDomainName","posDomain","domainName","value","replace","toLowerCase","trim","indexOf","substr","clearValues","passPhrase","passChangeRequiredCount","generatePassword","hidePasswordToggle","showElement","error","fullName","givenName","familyName","length","passwordType","securityQuestion","passOff","userName","then","passwordValue","clearBodyClasses","bodyNode","classList","add","loaderPassword","populateOrCopyPassword","setPassChangeRequired","err","message","executePasswordCopy","isChromeExtension","generateExtPassword","extHasPassword","passwordCardHeader","successToast","successPrefix","window","setTimeout","showToast","copyPasswordDiv","document","queryCommandSupported","scrollIntoView","copyPasswordToClipboard","thisPasswordTimeStamp","lastPassPhraseLength","lastPassGenTimeStamp","Date","now","changePassPhrase","showPasswordToggle","calculatedDomainName","generatePasswordButton","disabled","element","remove","clipboardVal","select","queryCommandEnabled","execCommand","console","log","clearClipboard","chooseType","setType","this","id","passwordSelection","copyPasswordButton","userNameDiv","securityQuestionDiv","passwordToggle","type","togglePasswordView","focus","runTests","open","toastElement","coveredElement","hideToast","PBKDF2","salt","numIterations","keyLength","crypto","subtle","cryptoTextEncoder","TextEncoder","saltBuffer","encode","passwordBuffer","importKey","name","key","deriveBits","iterations","hash","Promise","resolve","reject","derivedKey","CryptoJS","keySize","HMACSHA256","plainText","plainTextBuffer","importedKey","sign","mac","macArray","Uint8Array","HmacSHA256","convertWordArrayToUint8Array","aesEncrypt","aesKey","convertHexToUint8Array","iv","getRandomValues","encrypt","encryptedData","encryptedArray","ciphertext","encrypted","AES","aesDecrypt","encyptedData","cryptoTextDecoder","TextDecoder","decrypt","decryptedData","decryptedArray","decode","decrypted","enc","Utf8","stringify","convertDerivedKeyToHex","convertUint8ArrayToHex","convertWordArrayToHex","wordArray","words","sigBytes","u8","i","byte","u8Array","len","c","hex","toString","arr","byteLen","j","parseInt","Error","varToZero","Array","join","zeroIntArray","arrayToZero","holdingVal","aCounter","PassOff","keyNS","passwordNS","loginNS","answerNS","templates","maximum-password","long-password","medium-password","basic-password","short-password","pin","pin-6","login","answer","passchars","V","C","v","A","a","n","o","x"," ","countryTLDs","prototype","clearPassPhrase","passNS","performance","passOffContext","domainElements","fullNameValue","userNameValue","domainCountryCode","domainValue","split","slice","securityQuestionValue","seedArray","templateType","template","map","chars","seedCounter","e","resultType","closePasswordButton","headerKey","addEventListener","applicationCache","status","UPDATEREADY","location","reload","querySelector","lCounter","children","undefined","TemporaryPhraseStore","ns","encryptPhrase","passphrase","tempStoreContext","firstThreeChars","substring","verificationHash","threeCharHash","encData","decryptPhrase","constructor"],"mappings":"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","file":"opensesame.min.js","sourcesContent":["/** --------------------------------------------------------------------------------------------------------------\n  This web app uses the application cache - any change requires the passoff.appcache file to be modified.  \n    Modify the timestamp comment in the 2nd line to force browsers to refresh  \n  ----------------------------------------------------------------------------------------------------------------\n*/\n\n/*global PassOff, document, window, console, navigator, isChromeExtension, extHasPassword, generateExtPassword, zeroVar */\n\n//Variables for UI element\nvar givenName, familyName, passPhrase, domainName, securityQuestion, securityQuestionDiv, userName, userNameDiv, type, resultType, generatePasswordButton, password, passwordCard, passwordCardHeader, copyPasswordDiv, loaderPassword, closePasswordButton, copyPasswordButton, bodyNode, clipboardVal, passwordToggle, headerKey, successToast, lastPassGenTimeStamp, successPrefix;\n\n//Variable for calculations\nvar passOff, passwordType, fullName, error, passChangeRequiredCount, lastPassPhraseLength;\n\n\nfunction clearPassword() {\n    hideElement(passwordCard);\n    password.textContent = zeroVar(password.textContent);\n    password.textContent = \"\";\n    setPasswordButton();\n}\n\nfunction trimDomainName() {\n    var posDomain = 0;\n\n    /*Retrieve domain value and trim the leading http:// or https:// */\n    domainName.value = domainName.value.replace(/^https?:\\/\\//g, \"\").toLowerCase().trim();\n\n    //Check whether the whole URL is there - remove anything with a '/' onwards\n    posDomain = domainName.value.indexOf(\"/\");\n    if (posDomain > 0) {\n        domainName.value = domainName.value.substr(0, posDomain);\n    }\n\n}\n\nfunction clearValues() {\n    passPhrase.value = zeroVar(passPhrase.value);\n    passPhrase.value = \"\";\n    passChangeRequiredCount = 0;\n\n    clearPassword();\n}\n\nfunction generatePassword() {\n\n    hidePasswordToggle();\n\n    showElement(passwordCard);\n    error.textContent = password.textContent = \"\";\n\n    setPasswordButton();\n\n    fullName = givenName.value.trim() + familyName.value.trim();\n\n    if ((fullName === \"\" || passPhrase.value.trim().length === 0) || (passwordType === \"answer\" && securityQuestion.value.trim().length === 0)) {\n        return;\n    }\n\n    if (passwordType === \"answer\" && securityQuestion.value.trim().length === 0) {\n        //Security question must be present to generate an answer\n        return;\n    }\n\n\n    //Reset optional values\n    passOff.userName = \"\";\n    passOff.securityQuestion = \"\";\n\n    //Set values required for calculation\n    passOff.fullName = fullName;\n    passOff.passPhrase = passPhrase.value;\n    passOff.domainName = domainName.value.trim();\n    if (userName.value.trim().length > 0) {\n        passOff.userName = userName.value.trim();\n    }\n\n    if (passwordType === \"answer\" && securityQuestion.value.trim().length > 0) {\n        //Remove any punctuation, remove any consecutive spaces and convert to lower case\n        passOff.securityQuestion = securityQuestion.value.trim();\n    }\n\n    if (passwordType) {\n        passOff.generatePassword(passwordType)\n            .then(function (passwordValue) {\n                clearBodyClasses();\n                if (passwordType === \"answer\") {\n                    bodyNode.classList.add(\"ext-answer-generated\");\n\n                } else {\n                    bodyNode.classList.add(\"ext-pass-generated\");\n                }\n\n\n                password.textContent = passwordValue;\n                hideElement(loaderPassword);\n\n                populateOrCopyPassword();\n\n                setPassChangeRequired();\n\n            })\n            .catch(function (err) {\n                error.textContent = err.message;\n            });\n    }\n\n}\n\nfunction populateOrCopyPassword() {\n    var executePasswordCopy = false;\n\n    //Check if this is running within a Chrome extension and a password or PIN is being generated\n    if (typeof isChromeExtension !== 'undefined') {\n        //Call the extension password set function\n        generateExtPassword();\n\n        //Check whether the extension can directly set the password or PIN and if it the correct type\n        //If password can't be set or it is another type (user name or answer) it will just copy to cliboard instead\n        if (extHasPassword !== true || passwordCardHeader.textContent === \"User name\" || passwordCardHeader.textContent === \"Answer\") {\n            executePasswordCopy = true;\n        } else {\n            //Password will be directly inserted by ext-backgrounf.js, so show a password / pin inserted toast\n            successToast.textContent = successPrefix + \" inserted\";\n            window.setTimeout(function () {\n                showToast(successToast, copyPasswordDiv);\n            }, 250);\n        }\n\n    } else if (document.queryCommandSupported('copy')) {\n        //Not running in an extension so check the copy capability of the browser\n        executePasswordCopy = true;\n    }\n\n    if (executePasswordCopy) {\n        showElement(copyPasswordDiv);\n        password.scrollIntoView();\n        //Copy password to clipboard after 0.2 second\n        window.setTimeout(function () {\n            copyPasswordToClipboard();\n        }, 200);\n\n    }\n\n}\n\nfunction setPassChangeRequired() {\n    var thisPasswordTimeStamp;\n\n    //Set the more changes required to 2 \n    passChangeRequiredCount = 2;\n\n    //Set the length to the current pass phrase length\n    // This is an atttempt to give a little more security - a user can't just type in extra characters to reveal\n    //  the password.  Some of the characters need to be changed (still easy to work around)\n    lastPassPhraseLength = passPhrase.value.length;\n\n    //Set timestamp for last generated password\n    lastPassGenTimeStamp = Date.now();\n    thisPasswordTimeStamp = lastPassGenTimeStamp;\n\n    //Set function to clear passwords after 30 minutes if no other activity has occurred\n    window.setTimeout(function () {\n        //Check of this was the last password generated (timestamp still matches)\n        if (thisPasswordTimeStamp === lastPassGenTimeStamp) {\n            //Too much time has elapsed without any password activity so clear all the values\n            clearValues();\n        }\n    }, 1800000);\n}\n\nfunction changePassPhrase() {\n    clearPassword();\n\n    //Check if the pass phrase needs to be altered before the view toggle can be displayed\n    if (lastPassPhraseLength > 0 && passChangeRequiredCount > 0 && passPhrase.value.length <= lastPassPhraseLength) {\n        passChangeRequiredCount = passChangeRequiredCount - 1;\n    } else if (lastPassPhraseLength === 0 || passChangeRequiredCount === 0) {\n        showPasswordToggle();\n    }\n}\n\nfunction setPasswordButton() {\n\n    /*Retrieve domain value and trim the leading http:// or https://\n    then trim of any www prefix, eg 'www.'  , 'www1.', 'www-87.' */\n    var calculatedDomainName = domainName.value.replace(\"https://\", \"\").replace(\"http://\", \"\").replace(/^www[\\w-]*./g, \"\").trim().toLowerCase();\n\n    //Ignore the start of www.\n    if (calculatedDomainName === \"w\" || calculatedDomainName === \"ww\" || calculatedDomainName === \"www\") {\n        calculatedDomainName = \"\";\n    }\n\n    //Check if minimum values have been completed - all types need name and domain\n    if ((givenName.value.trim().length > 0 || familyName.value.trim().length > 0) && passPhrase.value.trim().length > 0 && calculatedDomainName.length > 0 &&\n        //For an answer type, a question must also be set \n        (passwordType !== \"answer\" || securityQuestion.value.trim().length > 0)) {\n        generatePasswordButton.disabled = false;\n    } else {\n        generatePasswordButton.disabled = true;\n\n    }\n    hideElement(copyPasswordDiv);\n}\n\nfunction showElement(element) {\n    element.classList.remove(\"hidden\");\n}\n\nfunction hideElement(element) {\n    element.classList.add(\"hidden\");\n}\n\nfunction clearBodyClasses() {\n    bodyNode.classList.remove(\"ext-pass\");\n    bodyNode.classList.remove(\"ext-answer\");\n    bodyNode.classList.remove(\"ext-pass-generated\");\n    bodyNode.classList.remove(\"ext-answer-generated\");\n}\n\nfunction copyPasswordToClipboard() {\n    clipboardVal.value = password.textContent;\n    clipboardVal.select();\n\n    if (document.queryCommandEnabled('copy')) {\n\n        try {\n            // Now that we've selected the anchor text, execute the copy command  \n            var successful = document.execCommand('copy');\n            successToast.textContent = successPrefix + \" copied to Clipboard\";\n            showToast(successToast, copyPasswordDiv);\n\n        } catch (err) {\n            console.log(\"Copy command failed\");\n        }\n    } else {\n        console.log(\"Copy command not enabled\");\n    }\n}\n\nfunction clearClipboard() {\n    clipboardVal.value = \"Value cleared\";\n    clipboardVal.select();\n    if (document.queryCommandSupported('copy')) {\n\n        try {\n            var successful = document.execCommand('copy');\n        } catch (err) {\n            console.log(\"Copy command failed\");\n        }\n    } else {\n        console.log(\"Copy command not enabled\");\n    }\n\n}\n\nfunction chooseType() {\n    setType(this.id);\n}\n\nfunction setType(passwordSelection) {\n    //console.log('Set password type:' + passwordSelection);\n    copyPasswordButton.textContent = \"Copy Password\";\n    successPrefix = \"Password\";\n    passwordCardHeader.textContent = \"Password\";\n    showElement(userNameDiv);\n    hideElement(securityQuestionDiv);\n    passwordType = passwordSelection;\n\n\n    switch (passwordSelection) {\n        case \"login\":\n            generatePasswordButton.textContent = \"User name\";\n            copyPasswordButton.textContent = \"Copy User name\";\n            successPrefix = \"User name\";\n            passwordCardHeader.textContent = \"User name\";\n            hideElement(userNameDiv);\n            break;\n        case \"maximum-password\":\n            generatePasswordButton.textContent = \"Produce Maximum Password\";\n            break;\n        case \"long-password\":\n            generatePasswordButton.textContent = \"Produce Long Password\";\n            break;\n        case \"medium-password\":\n            generatePasswordButton.textContent = \"Produce Medium Password\";\n            break;\n        case \"basic-password\":\n            generatePasswordButton.textContent = \"Produce Basic Password\";\n            break;\n        case \"short-password\":\n            generatePasswordButton.textContent = \"Produce Short Password\";\n            break;\n        case \"pin\":\n            generatePasswordButton.textContent = \"Produce Four Digit PIN\";\n            copyPasswordButton.textContent = \"Copy PIN\";\n            successPrefix = \"PIN\";\n            passwordCardHeader.textContent = \"PIN\";\n            break;\n        case \"pin-6\":\n            generatePasswordButton.textContent = \"Produce Six Digit PIN\";\n            copyPasswordButton.textContent = \"Copy PIN\";\n            successPrefix = \"PIN\";\n            passwordCardHeader.textContent = \"PIN\";\n            break;\n        case \"answer\":\n            generatePasswordButton.textContent = \"Produce Security Answer\";\n            copyPasswordButton.textContent = \"Copy Security Answer\";\n            successPrefix = \"Answer\";\n            passwordCardHeader.textContent = \"Answer\";\n            showElement(securityQuestionDiv);\n            break;\n    }\n\n    clearBodyClasses();\n    if (passwordType === \"answer\") {\n        bodyNode.classList.add(\"ext-answer\");\n\n    } else {\n        bodyNode.classList.add(\"ext-pass\");\n    }\n\n\n    clearPassword();\n}\n\nfunction showPasswordToggle() {\n    // Once a pass phrase has been used to generate a values, make sure that it can't be re-displayed\n    //  until at least 3 changes are applied.\n    // This is not providing much security but it at least stops someone displaying the exact pass phrase  \n    //  which was just used.\n    if (passChangeRequiredCount === 0) {\n        showElement(passwordToggle);\n    }\n}\n\nfunction hidePasswordToggle() {\n    hideElement(passwordToggle);\n    passPhrase.type = \"password\";\n}\n\nfunction togglePasswordView() {\n    //Toggle pass phrase between visible as a text area, and obscured like a normal password\n    if (passPhrase.type === \"password\") {\n        passPhrase.type = \"text-area\";\n    } else {\n        passPhrase.type = \"password\";\n    }\n\n    passPhrase.focus();\n\n}\n\nfunction runTests() {\n    if (typeof isChromeExtension !== 'undefined') {\n        window.open(\"https://mrpeel.github.io/opensesame/test/opensesame-test.html\");\n    } else {\n        window.open(\"test/opensesame-test.html\");\n    }\n\n}\n\n\nfunction showToast(toastElement, coveredElement) {\n    //Show toast element\n    hideElement(coveredElement);\n    showElement(toastElement);\n\n    toastElement.scrollIntoView();\n    //Hide again after 5 seconds\n    window.setTimeout(function () {\n        hideToast(toastElement, coveredElement);\n    }, 5200);\n}\n\nfunction hideToast(toastElement, coveredElement) {\n\n    showElement(coveredElement);\n    hideElement(toastElement);\n\n\n}\n\nwindow.addEventListener(\"load\", function () {\n\n    window.applicationCache.addEventListener('updateready', function (e) {\n        if (window.applicationCache.status == window.applicationCache.UPDATEREADY) {\n            // Browser downloaded a new app cache.\n            window.location.reload();\n        }\n    }, false);\n\n    passOff = new PassOff();\n\n    headerKey = document.querySelector(\"[id=header-key]\");\n    givenName = document.querySelector(\"[id=given-name]\");\n    familyName = document.querySelector(\"[id=family-name]\");\n    passPhrase = document.querySelector(\"[id=passphrase]\");\n    passwordToggle = document.querySelector(\"[id=show-password]\");\n    generatePasswordButton = document.querySelector(\"[id=generate-password]\");\n    domainName = document.querySelector(\"[id=domain]\");\n    securityQuestion = document.querySelector(\"[id=security-question]\");\n    securityQuestionDiv = document.querySelector(\"[id=security-question-div]\");\n    userName = document.querySelector(\"[id=user-name]\");\n    userNameDiv = document.querySelector(\"[id=user-name-div]\");\n    type = document.querySelector(\"[id=type]\");\n    passwordCard = document.querySelector(\"[id=password-card]\");\n    passwordCardHeader = document.querySelector(\"[id=password-card-header]\");\n    password = document.querySelector(\".password\");\n    clipboardVal = document.querySelector(\"[id=clipboard-value]\");\n    error = document.querySelector(\".error\");\n    successToast = document.querySelector(\"[id=success-toast]\");\n    copyPasswordButton = document.querySelector(\"[id=copy-password]\");\n    copyPasswordDiv = document.querySelector(\"[id=copy-password-div]\");\n    loaderPassword = document.querySelector(\"[id=load-bar-ball]\");\n    closePasswordButton = document.querySelector(\"[id=close-password]\");\n    bodyNode = document.querySelector(\"body\");\n\n    givenName.disabled = familyName.disabled = passPhrase.disabled = domainName.disabled = userName.disabled = type.disabled = false;\n\n    givenName.addEventListener(\"input\", clearPassword, false);\n    givenName.addEventListener(\"focus\", hidePasswordToggle, false);\n    givenName.addEventListener(\"focusin\", hidePasswordToggle, false);\n    familyName.addEventListener(\"input\", clearPassword, false);\n    familyName.addEventListener(\"focus\", hidePasswordToggle, false);\n    familyName.addEventListener(\"focusin\", hidePasswordToggle, false);\n    passPhrase.addEventListener(\"input\", changePassPhrase, false);\n    passPhrase.addEventListener(\"focus\", showPasswordToggle, false);\n    passPhrase.addEventListener(\"focusin\", showPasswordToggle, false);\n    securityQuestion.addEventListener(\"input\", clearPassword, false);\n    securityQuestion.addEventListener(\"focus\", hidePasswordToggle, false);\n    securityQuestion.addEventListener(\"focusin\", hidePasswordToggle, false);\n    domainName.addEventListener(\"input\", clearPassword, false);\n    domainName.addEventListener(\"focus\", hidePasswordToggle, false);\n    domainName.addEventListener(\"focusin\", hidePasswordToggle, false);\n    domainName.addEventListener(\"focusout\", trimDomainName, false);\n    domainName.addEventListener(\"blur\", trimDomainName, false);\n    userName.addEventListener(\"input\", clearPassword, false);\n    userName.addEventListener(\"focus\", hidePasswordToggle, false);\n    userName.addEventListener(\"focusin\", hidePasswordToggle, false);\n\n    //Loop through different values and add a listener\n    for (var lCounter = 0; lCounter < type.children.length; lCounter++) {\n        type.children[lCounter].addEventListener(\"click\", chooseType, false);\n    }\n\n\n    //Set the number of changes required to view a password to 0\n    passChangeRequiredCount = 0;\n    lastPassPhraseLength = 0;\n\n    //Set initial type\n    if (passwordType === undefined) {\n        //console.log('Password type is undefined');\n        setType(\"long-password\");\n    }\n    headerKey.addEventListener(\"click\", runTests, false);\n    generatePasswordButton.addEventListener(\"click\", generatePassword, false);\n    passwordToggle.addEventListener(\"click\", togglePasswordView, false);\n    copyPasswordButton.addEventListener(\"click\", copyPasswordToClipboard, false);\n    closePasswordButton.addEventListener(\"click\", clearPassword, false);\n\n    givenName.focus();\n\n}, false);\n","/*global CryptoJS, Promise, console, Uint8Array, window, TextEncoder, TextDecoder */\n\n/* Ensure functions are always adressable after minification / compilation */\nwindow['PBKDF2'] = PBKDF2;\nwindow['HMACSHA256'] = HMACSHA256;\nwindow['aesEncrypt'] = aesEncrypt;\nwindow['aesDecrypt'] = aesDecrypt;\nwindow['convertDerivedKeyToHex'] = convertDerivedKeyToHex;\nwindow['convertWordArrayToHex'] = convertWordArrayToHex;\nwindow['convertWordArrayToUint8Array'] = convertWordArrayToUint8Array;\nwindow['convertUint8ArrayToHex'] = convertUint8ArrayToHex;\nwindow['convertHexToUint8Array'] = convertHexToUint8Array;\nwindow['zeroVar'] = zeroVar;\nwindow['zeroIntArray'] = zeroIntArray;\n\n/**\n * Executes the PBKDF2 function.  If crypto subtle is supported it is used.  If not,  the CryptoJS PBKDF2 function is wrapped\n * in a promise.   Either way, it returns the derived key\n * @param {password, salt, numIterations, keylength} the password to perform the function on, the salt to apply, the number of iterations to \n *     perform, and the length for the derived key\n * @return {Promise} A promise which resolves to the derived key.\n */\n\n\nfunction PBKDF2(password, salt, numIterations, keyLength) {\n    \"use strict\";\n\n    if (window.crypto && window.crypto.subtle) {\n        //use the subtle crypto functions\n        var cryptoTextEncoder = new TextEncoder(\"utf-8\");\n\n        var saltBuffer = cryptoTextEncoder.encode(salt);\n        var passwordBuffer = cryptoTextEncoder.encode(password);\n\n        return window.crypto.subtle.importKey('raw', passwordBuffer, {\n            name: 'PBKDF2'\n        }, false, ['deriveBits']).then(function (key) {\n            return window.crypto.subtle.deriveBits({\n                name: 'PBKDF2',\n                iterations: numIterations,\n                salt: saltBuffer,\n                hash: 'SHA-1'\n            }, key, keyLength);\n        });\n\n    } else {\n        //use the CryptJS function\n\n        return new Promise(function (resolve, reject) {\n            var derivedKey = CryptoJS.PBKDF2(password, salt, {\n                iterations: numIterations,\n                keySize: keyLength / 32\n            });\n\n            resolve(derivedKey);\n        });\n    }\n\n}\n\n/**\n * Executes the HMAC-SHA256 function.  If crypto subtle is supported it is used.  If not,  the CryptoJS HmacSHA256 function is wrapped\n * in a promise, the converts the Word Array to a Uint8Array.  Returns the MAC as a Uint8Array.\n * @param {plainText, key} The plaintext data to be signed and the key to use for the signing.\n * @return {Promise} A promise which resolves a Uint8Array with the MAC.\n */\n\nfunction HMACSHA256(plainText, key) {\n    \"use strict\";\n\n    if (window.crypto && window.crypto.subtle) {\n        //use the subtle crypto functions\n        return new Promise(function (resolve, reject) {\n\n            var cryptoTextEncoder = new TextEncoder(\"utf-8\");\n            var plainTextBuffer = cryptoTextEncoder.encode(plainText);\n\n            window.crypto.subtle.importKey(\"raw\", key, {\n                    name: \"HMAC\",\n                    hash: {\n                        name: \"SHA-256\"\n                    }\n                }, false /*not extractable*/ , [\"sign\"])\n                .then(function (importedKey) {\n\n                    return window.crypto.subtle.sign({\n                        name: \"HMAC\",\n                        hash: {\n                            name: \"SHA-256\"\n                        }\n                    }, importedKey, plainTextBuffer);\n                })\n                .then(function (mac) {\n                    var macArray = new Uint8Array(mac);\n\n                    resolve(macArray);\n                });\n        });\n\n    } else {\n        //use the CryptJS function\n        return new Promise(function (resolve, reject) {\n            var mac = CryptoJS.HmacSHA256(plainText, key);\n            var macArray = convertWordArrayToUint8Array(mac);\n            //Convert to uInt8Array\n            resolve(macArray);\n        });\n    }\n}\n\n/**\n * Executes an AES encryption.  If crypto subtle is supported it is used.  If not,  the CryptoJS AES encryption function is wrapped in a promise.\n * Returns the encrypted data.\n * @param {plainText, key} The plaintext data to be encrypted and the encryption key as a hex string.\n * @return {Promise} A promise which resolves to the encryted data.\n */\nfunction aesEncrypt(plainText, key) {\n    \"use strict\";\n\n    if (window.crypto && window.crypto.subtle) {\n        //use the subtle crypto functions\n        return new Promise(function (resolve, reject) {\n            var cryptoTextEncoder = new TextEncoder(\"utf-8\");\n            var plainTextBuffer = cryptoTextEncoder.encode(plainText);\n\n            //Key will be supplied in hex - so need to convert to Uint8Array\n            var aesKey = convertHexToUint8Array(key);\n\n            //Create random initialisation vector\n            var iv = window.crypto.getRandomValues(new Uint8Array(16));\n\n            window.crypto.subtle.importKey(\"raw\", aesKey, {\n                    name: \"AES-CBC\",\n                    length: 128\n                }, false /*not extractable*/ , [\"encrypt\"])\n                .then(function (importedKey) {\n\n\n                    return window.crypto.subtle.encrypt({\n                        \"name\": \"AES-CBC\",\n                        iv: iv\n                    }, importedKey, plainTextBuffer);\n                })\n                .then(function (encryptedData) {\n                    var encryptedArray = new Uint8Array(encryptedData);\n\n                    resolve({\n                        iv: iv,\n                        ciphertext: encryptedArray\n                    }); //Return an object so the iv is contained with the ciphertext\n                });\n        });\n    } else {\n        //use the CryptJS function\n        return new Promise(function (resolve, reject) {\n            var encrypted = CryptoJS.AES.encrypt(plainText, key);\n            resolve(encrypted);\n        });\n    }\n\n}\n\n/**\n * Executes an AES decryption.  If crypto subtle is supported it is used.  If not,  the CryptoJS AES decryption function is wrapped in a promise.\n * Returns the decrypted data.\n * @param {cipherText, key} The ciphertext data to be decrypted and the decryption key as a hex string.\n * @return {Promise} A promise which resolves to the plain text data.\n */\nfunction aesDecrypt(encyptedData, key) {\n    \"use strict\";\n\n\n    if (window.crypto && window.crypto.subtle) {\n        //use the subtle crypto functions\n        return new Promise(function (resolve, reject) {\n            //Key will be supplied in hex - so need to convert to Uint8Array\n            var cryptoTextEncoder = new TextEncoder(\"utf-8\");\n            var cryptoTextDecoder = new TextDecoder(\"utf-8\");\n            var aesKey = convertHexToUint8Array(key);\n\n            window.crypto.subtle.importKey(\"raw\", aesKey, {\n                    name: \"AES-CBC\",\n                    length: 128\n                }, false /*not extractable*/ , [\"decrypt\"])\n                .then(function (importedKey) {\n\n                    return window.crypto.subtle.decrypt({\n                            name: \"AES-CBC\",\n                            iv: encyptedData.iv // Same IV as for encryption\n                        },\n                        importedKey,\n                        encyptedData.ciphertext\n                    );\n                })\n                .then(function (decryptedData) {\n                    var decryptedArray = new Uint8Array(decryptedData);\n                    var plainText = cryptoTextDecoder.decode(decryptedArray);\n\n                    resolve(plainText);\n                });\n        });\n\n    } else {\n        //use the CryptJS function\n        return new Promise(function (resolve, reject) {\n            var decrypted = CryptoJS.AES.decrypt(encyptedData, key);\n\n            //var decryptedArray = cryptoContext.convertWordArrayToUint8Array(decrypted);\n            //var plainText = cryptoContext.cryptoTextDecoder.decode(decryptedArray);\n\n            var plainText = CryptoJS.enc.Utf8.stringify(decrypted);\n            resolve(plainText);\n        });\n    }\n\n\n}\n\n/**\n * Converts a derived key to a hex string.  Determines whether using subtle crypto of CryptoJS and uses appropriate function\n * @param {wordArray / bufffer} derivedKey.\n * @return {String}.\n */\nfunction convertDerivedKeyToHex(derivedKey) {\n    \"use strict\";\n\n    if (window.crypto && window.crypto.subtle) {\n        return convertUint8ArrayToHex(new Uint8Array(derivedKey));\n\n    } else {\n        return convertUint8ArrayToHex(convertWordArrayToUint8Array(derivedKey));\n\n    }\n\n\n}\n\n/**\n * Converts a word array into a Hex String by chaining together canversion to Uint8Array, then to hex \n * @param {word array} wordArray .\n * @return {String}.\n */\nfunction convertWordArrayToHex(wordArray) {\n    \"use strict\";\n\n    return convertUint8ArrayToHex(convertWordArrayToUint8Array(wordArray));\n\n}\n\n/**\n * Converts a word array into a Uint8Array. \n * @param {word array} wordArray .\n * @return {Uint8Array}.\n */\nfunction convertWordArrayToUint8Array(wordArray) {\n    \"use strict\";\n\n    var words = wordArray.words;\n    var sigBytes = wordArray.sigBytes;\n\n    // Convert\n    var u8 = new Uint8Array(sigBytes);\n    for (var i = 0; i < sigBytes; i++) {\n        var byte = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n        u8[i] = byte;\n    }\n\n    return u8;\n\n}\n\n/**\n * Converts a Uint8Array into a Uint8Array to a hex string. \n * @param {u8Array} Uint8Array.\n * @return {String}.\n */\nfunction convertUint8ArrayToHex(u8Array) {\n    var i;\n    var len;\n    var hex = '';\n    var c;\n\n    for (i = 0, len = u8Array.length; i < len; i += 1) {\n        c = u8Array[i].toString(16);\n        if (c.length < 2) {\n            c = '0' + c;\n        }\n        hex += c;\n    }\n\n    return hex;\n}\n\n\n/**\n * Converts a Hex string into a Uint8Array. \n * @param {hex} String.\n * @return {Uint8Array}.\n */\nfunction convertHexToUint8Array(hex) {\n    var i;\n    var byteLen = hex.length / 2;\n    var arr;\n    var j = 0;\n\n    if (byteLen !== parseInt(byteLen, 10)) {\n        throw new Error(\"Invalid hex length '\" + hex.length + \"'\");\n    }\n\n    arr = new Uint8Array(byteLen);\n\n    for (i = 0; i < byteLen; i += 1) {\n        arr[i] = parseInt(hex[j] + hex[j + 1], 16);\n        j += 2;\n    }\n\n    return arr;\n}\n\n/** Utility function to replace a string's value with all zeroes\n */\nfunction zeroVar(varToZero) {\n    return Array(varToZero.length).join(\"0\");\n\n}\n\n/** Utility function to replace an array's value with all zeroes\n */\nfunction zeroIntArray(arrayToZero) {\n    var holdingVal = arrayToZero;\n    for (var aCounter = 0; aCounter < arrayToZero.length; aCounter++) {\n        holdingVal[aCounter] = 0;\n    }\n    return holdingVal;\n\n}\n","/** Passoff class encapsulating the functionality for generating a password.\n    Requires cryptofunctions.js which determies whether to use subtle crypto or cryptojs\n    and executes the appropriate functions.\n*/\n\n/*global CryptoJS, Promise, performance, console, Uint8Array */\n\n/* Functions defined in cryptofunctions.js */\n/* global PBKDF2, HMACSHA256, aesEncrypt, aesDecrypt, convertDerivedKeyToHex, convertWordArrayToHex, convertWordArrayToUint8Array, convertUint8ArrayToHex, convertHexToUint8Array, zeroVar, zeroIntArray */\n\n/** \n * \n * PassOff uses BKDF2 to generate salted password and HMAC256 to generate a seed.  The seed is then ued to generate a password based on\n    a chosen template.\n */\nvar PassOff = function () {\n    \"use strict\";\n\n    // The namespace used in calculateKey\n    this.keyNS = \"cake.man.passoff\";\n\n    // The namespaces used in calculateSeed\n    this.passwordNS = \"cake.man.passoff.password\";\n    this.loginNS = \"cake.man.passoff.login\";\n    this.answerNS = \"cake.man.passoff.answer\";\n\n    //The values which will be populated for creating the password\n    this.fullName = '';\n    this.passPhrase = '';\n    this.domainName = '';\n    this.userName = '';\n    this.securityQuestion = '';\n\n\n    // The templates that passwords may be created from\n    // The characters map to MPW.passchars\n    this.templates = {\n        \"maximum-password\": [\n\t\t\"anoxxxxxxxxxxxxxxxxx\",\n\t\t\"axxxxxxxxxxxxxxxxxno\"\n\t],\n        \"long-password\": [\n\t\t\"CvcvnoCvcvCvcv\",\n\t\t\"CvcvCvcvnoCvcv\",\n\t\t\"CvcvCvcvCvcvno\",\n\t\t\"CvccnoCvcvCvcv\",\n\t\t\"CvccCvcvnoCvcv\",\n\t\t\"CvccCvcvCvcvno\",\n\t\t\"CvcvnoCvccCvcv\",\n\t\t\"CvcvCvccnoCvcv\",\n\t\t\"CvcvCvccCvcvno\",\n\t\t\"CvcvnoCvcvCvcc\",\n\t\t\"CvcvCvcvnoCvcc\",\n\t\t\"CvcvCvcvCvccno\",\n\t\t\"CvccnoCvccCvcv\",\n\t\t\"CvccCvccnoCvcv\",\n\t\t\"CvccCvccCvcvno\",\n\t\t\"CvcvnoCvccCvcc\",\n\t\t\"CvcvCvccnoCvcc\",\n\t\t\"CvcvCvccCvccno\",\n\t\t\"CvccnoCvcvCvcc\",\n\t\t\"CvccCvcvnoCvcc\",\n\t\t\"CvccCvcvCvccno\"\n\t],\n        \"medium-password\": [\n\t\t\"CvcnoCvc\",\n\t\t\"CvcCvcno\"\n\t],\n        \"basic-password\": [\n\t\t\"aaanaaan\",\n\t\t\"aannaaan\",\n\t\t\"aaannaaa\"\n\t],\n        \"short-password\": [\n\t\t\"Cvcn\"\n\t],\n        pin: [\n\t\t\"nnnn\"\n\t],\n        \"pin-6\": [\n\t\t\"nnnnnn\"\n\t],\n        login: [\n\t\t\"cvccvcvcv\"\n\t],\n        answer: [\n\t\t\"cvcc cvc cvccvcv cvc\",\n\t\t\"cvc cvccvcvcv cvcv\",\n\t\t\"cv cvccv cvc cvcvccv\"\n\t]\n    };\n\n    // The password character mapping\n    // c in template becomes bcdfghjklmnpqrstvwxyz\n    this.passchars = {\n        V: \"AEIOU\",\n        C: \"BCDFGHJKLMNPQRSTVWXYZ\",\n        v: \"aeiou\",\n        c: \"bcdfghjklmnpqrstvwxyz\",\n        A: \"AEIOUBCDFGHJKLMNPQRSTVWXYZ\",\n        a: \"AEIOUaeiouBCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\",\n        n: \"0123456789\",\n        o: \"@&%?,=[]_:-+*$#!'^~;()/.\",\n        x: \"AEIOUaeiouBCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz0123456789!@#$%^&*()\",\n        \" \": \" \"\n    };\n\n    // All the country top level domain suffixes - used for determining the domain from a URL\n    // N.B. \".io\" has been excluded becuase it is used like .com, eg github.io \n    this.countryTLDs = [\"ac\", \"ad\", \"ae\", \"af\", \"ag\", \"ai\", \"al\", \"am\", \"an\", \"ao\", \"aq\", \"ar\", \"as\", \"at\", \"au\", \"aw\", \"ax\", \"az\", \"ba\",\n                        \"bb\", \"bd\", \"be\", \"bf\", \"bg\", \"bh\", \"bi\", \"bj\", \"bm\", \"bn\", \"bo\", \"br\", \"bs\", \"bt\", \"bv\", \"bw\", \"by\", \"bz\", \"ca\",\n                        \"cc\", \"cd\", \"cf\", \"cg\", \"ch\", \"ci\", \"ck\", \"cl\", \"cm\", \"cn\", \"co\", \"cr\", \"cs\", \"cu\", \"cv\", \"cw\", \"cx\", \"cy\", \"cz\",\n                        \"dd\", \"de\", \"dj\", \"dk\", \"dm\", \"do\", \"dz\", \"ec\", \"ee\", \"eg\", \"eh\", \"er\", \"es\", \"et\", \"eu\", \"fi\", \"fj\", \"fk\", \"fm\",\n                        \"fo\", \"fr\", \"ga\", \"gb\", \"gd\", \"ge\", \"gf\", \"gg\", \"gh\", \"gi\", \"gl\", \"gm\", \"gn\", \"gp\", \"gq\", \"gr\", \"gs\", \"gt\", \"gu\",\n                        \"gw\", \"gy\", \"hk\", \"hm\", \"hn\", \"hr\", \"ht\", \"hu\", \"id\", \"ie\", \"il\", \"im\", \"in\", /*\"io\",*/ \"iq\", \"ir\", \"is\", \"it\", \"je\",\n                        \"jm\", \"jo\", \"jp\", \"ke\", \"kg\", \"kh\", \"ki\", \"km\", \"kn\", \"kp\", \"kr\", \"kw\", \"ky\", \"kz\", \"la\", \"lb\", \"lc\", \"li\", \"lk\",\n                        \"lr\", \"ls\", \"lt\", \"lu\", \"lv\", \"ly\", \"ma\", \"mc\", \"md\", \"me\", \"mg\", \"mh\", \"mk\", \"ml\", \"mm\", \"mn\", \"mo\", \"mp\", \"mq\",\n                        \"mr\", \"ms\", \"mt\", \"mu\", \"mv\", \"mw\", \"mx\", \"my\", \"mz\", \"na\", \"nc\", \"ne\", \"nf\", \"ng\", \"ni\", \"nl\", \"no\", \"np\", \"nr\",\n                        \"nu\", \"nz\", \"om\", \"pa\", \"pe\", \"pf\", \"pg\", \"ph\", \"pk\", \"pl\", \"pm\", \"pn\", \"pr\", \"ps\", \"pt\", \"pw\", \"py\", \"qa\", \"re\",\n                        \"ro\", \"rs\", \"ru\", \"rw\", \"sa\", \"sb\", \"sc\", \"sd\", \"se\", \"sg\", \"sh\", \"si\", \"sj\", \"sk\", \"sl\", \"sm\", \"sn\", \"so\", \"sr\",\n                        \"ss\", \"st\", \"su\", \"sv\", \"sx\", \"sy\", \"sz\", \"tc\", \"td\", \"tf\", \"tg\", \"th\", \"tj\", \"tk\", \"tl\", \"tm\", \"tn\", \"to\", \"tp\",\n                        \"tr\", \"tt\", \"tv\", \"tw\", \"tz\", \"ua\", \"ug\", \"uk\", \"us\", \"uy\", \"uz\", \"va\", \"vc\", \"ve\", \"vg\", \"vi\", \"vn\", \"vu\", \"wf\",\n                        \"ws\", \"ye\", \"yt\", \"yu\", \"za\", \"zm\", \"zw\"];\n\n};\n\n/**\n * Wraps the CryptoJS PBKDF2 function in a promise and returns a key\n * @param {Object} queryParams The request parameters.\n * @return {Promise} A promise.\n */\n/*PassOff.prototype.PBKDF2 = function (password, salt) {\n    \"use strict\";\n\n    return new Promise(function (resolve, reject) {\n        var derivedKey = CryptoJS.PBKDF2(password, salt, {\n            iterations: 750,\n            keySize: 128 / 32\n        });\n\n        resolve(derivedKey);\n    });\n\n};*/\n\n/**\n * Wraps the CryptoJS HMAC256 function in a promise and returns signed data as a word array\n * @param {Object} queryParams The request parameters.\n * @return {Promise} A promise.\n */\n\n/*PassOff.prototype.HMACSHA256 = function (plainText, key) {\n    \"use strict\";\n\n    return new Promise(function (resolve, reject) {\n        var seed = CryptoJS.HmacSHA256(plainText, key);\n\n        resolve(seed);\n    });\n\n};*/\n\n/**\n * Converts a word array into a Uint8Array to convert to use as a numeric array. \n * Assumes wordArray is Big-Endian (because it comes from CryptoJS which is all BE)\n * @param {word array} wordArray .\n * @return {Uint8Array}.\n */\n/*PassOff.prototype.convertWordArrayToUint8Array = function (wordArray) {\n    \"use strict\";\n\n    var len = wordArray.words.length,\n        u8_array = new Uint8Array(len << 2),\n        offset = 0,\n        word, i;\n\n    for (i = 0; i < len; i++) {\n        word = wordArray.words[i];\n        u8_array[offset++] = word >> 24;\n        u8_array[offset++] = (word >> 16) & 0xff;\n        u8_array[offset++] = (word >> 8) & 0xff;\n        u8_array[offset++] = word & 0xff;\n    }\n\n    return u8_array;\n};*/\n\n/**\n * Resets all the values used for calculations\n * @param {None}.\n * @return {None}.\n */\n\nPassOff.prototype.clearPassPhrase = function () {\n    \"use strict\";\n\n    this.passPhrase = zeroVar(this.passPhrase);\n    this.passPhrase = \"\";\n};\n/**\n * Runs the generation of a password by generating a key (PBKDF2) and then using that key to sign (HMAC256) the constructed domain value\n * @param {String} the password type to generate\n * @return {Promise} a promise which will resolve the generated password.\n */\n\nPassOff.prototype.generatePassword = function (passwordType) {\n    \"use strict\";\n\n    var t0 = performance.now();\n    var passNS;\n\n    if (this.fullName.length === 0) {\n        return Promise.reject(new Error(\"Name not present\"));\n    }\n\n    if (this.passPhrase.length === 0) {\n        return Promise.reject(new Error(\"Passphrase not present\"));\n    }\n\n    if (this.domainName.length === 0) {\n        return Promise.reject(new Error(\"Domain name not present\"));\n    }\n\n    if (passwordType === \"answer\" && this.securityQuestion.length === 0) {\n        return Promise.reject(new Error(\"Security question not present\"));\n    }\n\n\n    try {\n        var passOffContext = this;\n\n        //return promise which resolves to the generated password\n        return new Promise(function (resolve, reject) {\n\n            passNS = passOffContext.passwordNS;\n\n            if (passwordType === \"answer\") {\n                passNS = passOffContext.answerNS;\n            } else if (passwordType == \"login\") {\n                passNS = passOffContext.loginNS;\n            }\n\n            //Set up parameters for PBKDF2 and HMAC functions\n            var fullNameValue = passOffContext.fullName.trim().toLowerCase();\n            var salt = passNS + \".\" + fullNameValue;\n            var userNameValue = passOffContext.userName.trim().toLowerCase();\n            var posDomain = 0;\n            var domainElements;\n            var domainCountryCode = \"\";\n\n            /*Retrieve domain value and trim the leading http:// or https:// */\n            var domainValue = passOffContext.domainName.replace(/^https?:\\/\\//g, \"\").toLowerCase();\n\n            /* trim of any www prefix, eg 'www.'  , 'www1.', 'www-87.' */\n            //domainValue = domainValue.replace(/^www*./g, \"\").trim();\n\n\n            //Check whether the whole URL is there - remove anything with a '/' onwards\n            posDomain = domainValue.indexOf(\"/\");\n            if (posDomain > 0) {\n                domainValue = domainValue.substr(0, posDomain);\n            }\n\n            //Split base domain into its individual elements\n            domainElements = domainValue.split(\".\");\n\n            //Check whether the last domain element is a country code suffix, eg mrpeeel.com.au\n            if (domainElements.length > 1 && passOffContext.countryTLDs.indexOf(domainElements[domainElements.length - 1]) >= 0) {\n                //Save the country code and remove from domain elements array\n                domainCountryCode = \".\" + domainElements[domainElements.length - 1];\n                domainElements = domainElements.slice(0, -1);\n            }\n\n            //if there are more than 2 elements remaining, only keep the last two\n            //eg photos.google.com = google.com, mail.google.com = google.com\n            if (domainElements.length > 2) {\n                domainElements = domainElements.slice(-2);\n            }\n\n            //Re-assemble base domain into final value with country code\n            domainValue = domainElements.join(\".\") + domainCountryCode;\n\n            var securityQuestionValue = \"\";\n\n            //If  a specific user has been specified, then add to domain value\n            if (userNameValue && userNameValue.length > 0) {\n                domainValue = userNameValue + \"@\" + domainValue;\n            }\n\n            //For an answer, add the security question to domain value\n\n            if (passwordType === \"answer\") {\n                //Strip out any punctuation or multiple spaces and convert to lower case \n                securityQuestionValue = passOffContext.securityQuestion.replace(/[.,-\\/#!$%\\^&\\*;:{}=\\-_`~()?'\"]/g, \"\").replace(/  +/g, ' ').trim().toLowerCase();\n                domainValue = domainValue + \":\" + securityQuestionValue;\n            }\n\n\n\n            //parameters: password, salt, numIterations, keyLength\n            return PBKDF2(passOffContext.passPhrase, salt, 750, 128)\n                .then(function (key) {\n                    //console.log(\"Derived key: \" + key);\n\n                    return HMACSHA256(domainValue, key);\n                    /*}).then(function (seed) {\n                        //console.log(\"HMAC result seed hex: \" + seed);\n                        var seedArray = passOffContext.convertWordArrayToUint8Array(seed);\n\n                        //console.log(\"HMAC result seed array: \" + seedArray);\n                        //console.log(performance.now() - t0 + \" ms\");\n                        return seedArray;*/\n                }).then(function (seedArray) {\n                    // Find the selected template array\n                    var templateType = passOffContext.templates[passwordType];\n\n                    // Select the specific template based on seed[0]\n                    var template = templateType[seedArray[0] % templateType.length];\n                    //console.log(\"Selected template: \" + template);\n                    //console.log(performance.now() - t0 + \" ms\");\n\n                    // Split the template string\n                    var password = template.split(\"\").map(function (c, i) {\n                        // Use the available passchars to map the template string\n                        // to characters (e.g. c -> bcdfghjklmnpqrstvwxyz)\n                        var chars = passOffContext.passchars[c];\n\n                        // Select the character using seed[i + 1]\n                        return chars[seedArray[i + 1] % chars.length];\n                    }).join(\"\"); /*Re-join as password*/\n                    //console.log(\"Generated password: \" + password);\n                    //console.log(performance.now() - t0 + \" ms\");\n                    //console.log(\"All done\");\n\n                    //Clear seedArray\n                    for (var seedCounter = 0; seedCounter < seedArray.length; seedCounter++) {\n                        seedArray[seedCounter] = 0;\n                    }\n\n\n                    //Clear pass phrase values\n                    passOffContext.clearPassPhrase();\n\n                    resolve(password);\n                })\n                .catch(function (e) {\n                    return Promise.reject(e);\n                });\n\n        });\n\n    } catch (e) {\n        return Promise.reject(e);\n    }\n\n};\n","/*global  console, CryptoJS, Uint8Array, Promise, performance, TextEncoder, TextDecoder, window, webcrypto, crypto, CryptoFunctions */\n/*global PBKDF2, convertDerivedKeyToHex, aesEncrypt, aesDecrypt, zeroVar, zeroIntArray */\n\n\nvar TemporaryPhraseStore = function () {\n    this.ns = \"cake.man.io\";\n};\n\n\nTemporaryPhraseStore.prototype.encryptPhrase = function (passphrase, name) {\n    \"use strict\";\n\n    var aesKey;\n    var tempStoreContext = this;\n    return new Promise(function (resolve, reject) {\n\n        if (typeof passphrase === \"string\" && passphrase.length >= 3) {\n            var firstThreeChars = passphrase.substring(0, 3);\n\n\n            PBKDF2(name + firstThreeChars, name + tempStoreContext.ns, 500, 128)\n                .then(function (key) {\n                    aesKey = convertDerivedKeyToHex(key);\n\n                    return PBKDF2(convertDerivedKeyToHex(key), name + firstThreeChars, 250, 128);\n                }).then(function (verificationHash) {\n                    tempStoreContext.threeCharHash = convertDerivedKeyToHex(verificationHash);\n\n                    return aesEncrypt(passphrase, aesKey);\n                }).then(function (encryptedData) {\n                    tempStoreContext.encData = encryptedData;\n                    resolve(\"Success\");\n                }).catch(function (err) {\n                    reject(err);\n                });\n        } else {\n            reject(\"Pass phrase must be a sring at least three characters long\");\n        }\n    });\n\n};\n\n\n\nTemporaryPhraseStore.prototype.decryptPhrase = function (firstThreeChars, name) {\n    \"use strict\";\n\n    var tempStoreContext = this;\n    var aesKey;\n\n    return new Promise(function (resolve, reject) {\n\n        if (typeof tempStoreContext.encData === \"undefined\") {\n            reject(\"No encrypted data found\");\n\n        } else if (typeof firstThreeChars !== \"string\" || firstThreeChars.length !== 3) {\n            delete tempStoreContext.encData;\n            delete tempStoreContext.threeCharHash;\n\n            reject(\"First three characters parameter is not a 3 character string\");\n\n        } else {\n\n\n            PBKDF2(name + firstThreeChars, name + tempStoreContext.ns, 500, 128)\n                .then(function (key) {\n                    aesKey = convertDerivedKeyToHex(key);\n\n                    return PBKDF2(convertDerivedKeyToHex(key), name + firstThreeChars, 250, 128);\n                }).then(function (verificationHash) {\n                    if (tempStoreContext.threeCharHash === convertDerivedKeyToHex(verificationHash)) {\n\n                        aesDecrypt(tempStoreContext.encData, aesKey)\n                            .then(function (plainText) {\n                                resolve(plainText);\n                            });\n\n                    } else {\n                        zeroVar(tempStoreContext.threeCharHash);\n                        tempStoreContext.threeCharHash = \"\";\n\n                        if (typeof tempStoreContext.encData.iv === \"string\") {\n                            zeroVar(tempStoreContext.encData.iv);\n                            tempStoreContext.encData.iv = \"\";\n                        } else if (tempStoreContext.encData.iv.constructor.name === \"Uint8Array\") {\n                            zeroIntArray(tempStoreContext.encData.iv);\n                            tempStoreContext.encData.iv = [];\n                        }\n\n                        if (typeof tempStoreContext.encData.ciphertext === \"string\") {\n                            zeroVar(tempStoreContext.encData.ciphertext);\n                            tempStoreContext.encData.ciphertext = \"\";\n                        } else if (tempStoreContext.encData.ciphertext.constructor.name === \"Uint8Array\") {\n                            zeroIntArray(tempStoreContext.encData.ciphertext);\n                            tempStoreContext.encData.ciphertext = [];\n                        }\n\n                        delete tempStoreContext.encData;\n                        delete tempStoreContext.threeCharHash;\n\n                        reject(\"First three characters did not match\");\n                    }\n\n                });\n        }\n    });\n};\n"],"sourceRoot":"/source/"}