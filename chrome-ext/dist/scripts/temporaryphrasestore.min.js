let TemporaryPhraseStore=function(){this.ns="cake.man.io"};TemporaryPhraseStore.prototype.encryptPhrase=function(passphrase,name){"use strict";assert(""!==passphrase,"TemporaryPhraseStore.prototype.encryptPhrase passphrase: "+passPhrase),assert(""!==name,"TemporaryPhraseStore.prototype.encryptPhrase userName: "+name);let aesKey,tempStoreContext=this;return new Promise(function(resolve,reject){if("string"==typeof passphrase&&passphrase.length>=3){let firstThreeChars=passphrase.substring(0,3);pBKDF2(name+firstThreeChars,name+tempStoreContext.ns,500,128).then(function(key){return aesKey=convertDerivedKeyToHex(key),pBKDF2(convertDerivedKeyToHex(key),name+firstThreeChars,250,128)}).then(function(verificationHash){return tempStoreContext.threeCharHash=convertDerivedKeyToHex(verificationHash),aesEncrypt(passphrase,aesKey)}).then(function(encryptedData){tempStoreContext.encData=encryptedData,resolve("Success")}).catch(function(err){reject(err)})}else reject("Pass phrase must be a sring at least three characters long")})},TemporaryPhraseStore.prototype.decryptPhrase=function(firstThreeChars,name){"use strict";assert(""!==firstThreeChars,"TemporaryPhraseStore.prototype.decryptPhrase firstThreeChars: "+firstThreeChars),assert(""!==name,"TemporaryPhraseStore.prototype.decryptPhrase name: "+name);let aesKey,tempStoreContext=this;return new Promise(function(resolve,reject){"undefined"==typeof tempStoreContext.encData?reject("No encrypted data found"):"string"!=typeof firstThreeChars||3!==firstThreeChars.length?(tempStoreContext.clearStore(),reject("First three characters parameter is not a 3 character string")):pBKDF2(name+firstThreeChars,name+tempStoreContext.ns,500,128).then(function(key){return aesKey=convertDerivedKeyToHex(key),pBKDF2(convertDerivedKeyToHex(key),name+firstThreeChars,250,128)}).then(function(verificationHash){tempStoreContext.threeCharHash===convertDerivedKeyToHex(verificationHash)?aesDecrypt(tempStoreContext.encData,aesKey).then(function(plainText){resolve(plainText)}):(tempStoreContext.clearStore(),reject("First three characters did not match"))})})},TemporaryPhraseStore.prototype.clearStore=function(){"use strict";"undefined"!=typeof this.threeCharHash&&(zeroVar(this.threeCharHash),delete this.threeCharHash),"undefined"!=typeof this.encData&&("string"==typeof this.encData.iv?(zeroVar(this.encData.iv),this.encData.iv=""):"Uint8Array"===this.encData.iv.constructor.name&&(zeroIntArray(this.encData.iv),this.encData.iv=[]),"string"==typeof this.encData.ciphertext?(zeroVar(this.encData.ciphertext),this.encData.ciphertext=""):"Uint8Array"===this.encData.ciphertext.constructor.name&&(zeroIntArray(this.encData.ciphertext),this.encData.ciphertext=[]),delete this.encData)},TemporaryPhraseStore.prototype.storeValues=function(threeCharHash,encData){"use strict";assert(""!==threeCharHash,"TemporaryPhraseStore.prototype.storeValues threeCharHash: "+threeCharHash),assert(""!==encData,"TemporaryPhraseStore.prototype.storeValues encData: "+encData),this.threeCharHash=threeCharHash,this.encData=encData},window.TemporaryPhraseStore=TemporaryPhraseStore;