{"version":3,"sources":["manager.js","ext-popup.js","cryptofunctions.js","passoff.js"],"names":["clearPassword","hideElement","passwordCard","password","textContent","zeroVar","setPasswordButton","clearPassPhraseStore","temporaryPhraseStore","clearStore","isChromeExtension","clearExtPhrase","lastPassGenTimeStamp","Date","now","clearPassPhrase","passPhrase","value","clearPassPhraseAndStore","setPassPhraseScreenState","focus","setPassPhrase","passPhraseValue","passPhraseTimedClear","thisPasswordTimeStamp","window","setTimeout","passwordGenerated","encryptPhrase","fullName","then","val","storeExtPhrase","err","console","log","generatePassword","hidePassPhraseDisplayButton","showElement","error","copyPasswordDiv","isReadyToGenerate","passOff","userName","securityQuestion","domainName","trim","length","passwordType","passwordValue","clearBodyClasses","bodyNode","classList","add","loaderPassword","populateOrCopyPassword","message","executePasswordCopy","generateExtPassword","extHasPassword","passwordCardHeader","successToast","successPrefix","showToast","scrollIntoView","copyPasswordToClipboard","passState","passPhraseState","passPhraseDiv","confirmPassPhraseDiv","clearPassPhraseButton","dialog","document","querySelector","MaterialDialog","show","failureToast","checkConfirmation","confirmPassPhrase","confirmThreeChars","threeChars","Name","decryptPhrase","plainText","trimDomainName","calculatedDomainName","replace","toLowerCase","givenName","familyName","posDomain","indexOf","substr","generatePasswordButton","disabled","element","remove","clipboardVal","select","execCommand","chooseType","setType","this","id","passwordSelection","copyPasswordButton","userNameDiv","securityQuestionDiv","showPassPhraseDisplayButton","passPhraseDisplayButton","type","togglePassPhraseView","runTests","open","toastElement","coveredElement","hideToast","setPassChangeRequired","passChangeRequiredCount","lastPassPhraseLength","changePassPhrase","chrome","runtime","sendMessage","threeCharHash","phraseStore","encData","setValuePopulated","pElement","parentElement","PBKDF2","salt","numIterations","keyLength","crypto","subtle","cryptoTextEncoder","TextEncoder","saltBuffer","encode","passwordBuffer","importKey","name","key","deriveBits","iterations","hash","Promise","resolve","reject","derivedKey","CryptoJS","keySize","HMACSHA256","plainTextBuffer","importedKey","sign","mac","macArray","Uint8Array","HmacSHA256","convertWordArrayToUint8Array","aesEncrypt","aesKey","convertHexToUint8Array","iv","getRandomValues","encrypt","encryptedData","encryptedArray","ciphertext","encrypted","AES","aesDecrypt","encyptedData","cryptoTextDecoder","TextDecoder","decrypt","decryptedData","decryptedArray","decode","decrypted","enc","Utf8","stringify","convertDerivedKeyToHex","convertUint8ArrayToHex","convertWordArrayToHex","wordArray","words","sigBytes","u8","i","byte","u8Array","len","c","hex","toString","arr","byteLen","j","parseInt","Error","varToZero","Array","join","zeroIntArray","arrayToZero","holdingVal","aCounter","PassOff","keyNS","passwordNS","loginNS","answerNS","templates","maximum-password","long-password","medium-password","basic-password","short-password","pin","pin-6","login","answer","passchars","V","C","v","A","a","n","o","x"," ","countryTLDs","prototype","passNS","performance","passOffContext","domainElements","fullNameValue","userNameValue","domainCountryCode","domainValue","split","slice","securityQuestionValue","seedArray","templateType","template","map","chars","seedCounter","e","resultType","closePasswordButton","passPhraseLabel","clearPassPhraseInStoreButton","headerKey","addEventListener","applicationCache","status","UPDATEREADY","location","reload","TemporaryPhraseStore","lCounter","children","undefined","tabs","query","active","currentWindow","activeTab","onMessage","addListener","request","sender","sendResponse","url","hasPassword","storeValues"],"mappings":"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","file":"ext-opensesame.min.js","sourcesContent":["/** --------------------------------------------------------------------------------------------------------------\n  This web app uses the application cache - any change requires the passoff.appcache file to be modified.  \n    Modify the timestamp comment in the 2nd line to force browsers to refresh  \n  ----------------------------------------------------------------------------------------------------------------\n*/\n\n/*global PassOff, document, window, console, navigator, isChromeExtension, extHasPassword, generateExtPassword, clearExtPhrase, storeExtPhrase, zeroVar, zeroIntArray, TemporaryPhraseStore */\n\n//Variables for UI element\nvar givenName, familyName, passPhrase, domainName, securityQuestion, securityQuestionDiv, userName, userNameDiv, type, resultType, generatePasswordButton, password, passwordCard, passwordCardHeader, copyPasswordDiv, loaderPassword, closePasswordButton, copyPasswordButton, bodyNode, clipboardVal, failureToast, passPhraseDiv, passPhraseLabel, passPhraseDisplayButton, clearPassPhraseButton, confirmPassPhraseDiv, confirmPassPhrase, clearPassPhraseInStoreButton, headerKey, successToast;\n\n//Variable for processing\nvar passOff, temporaryPhraseStore, passwordType, fullName, error, passChangeRequiredCount, lastPassPhraseLength, lastPassGenTimeStamp, successPrefix, passPhraseState;\n\n\n\nwindow.addEventListener(\"load\", function () {\n\n    /*If a change has been detected for the appcache, force an immediate re-load to apply the change\n     */\n    window.applicationCache.addEventListener('updateready', function (e) {\n        if (window.applicationCache.status == window.applicationCache.UPDATEREADY) {\n            // Browser downloaded a new app cache.\n            window.location.reload();\n        }\n    }, false);\n\n    /*Set up the classes for password calculation and temporary pass phrase storage */\n    passOff = new PassOff();\n    temporaryPhraseStore = new TemporaryPhraseStore();\n\n    /*Set-up variables for the UI elements */\n    headerKey = document.querySelector(\"[id=header-key]\");\n    givenName = document.querySelector(\"[id=given-name]\");\n    familyName = document.querySelector(\"[id=family-name]\");\n    failureToast = document.querySelector(\"[id=failure-toast]\");\n    passPhraseDiv = document.querySelector(\"[id=passphrase-div]\");\n    passPhraseLabel = document.querySelector(\"[id=passphrase-label]\");\n    passPhrase = document.querySelector(\"[id=passphrase]\");\n    passPhraseDisplayButton = document.querySelector(\"[id=show-passphrase]\");\n    clearPassPhraseButton = document.querySelector(\"[id=clear-passphrase]\");\n    confirmPassPhraseDiv = document.querySelector(\"[id=confirm-passphrase-div]\");\n    confirmPassPhrase = document.querySelector(\"[id=confirm-passphrase]\");\n    clearPassPhraseInStoreButton = document.querySelector(\"[id=clear-passphrase-in-store]\");\n    generatePasswordButton = document.querySelector(\"[id=generate-password]\");\n    domainName = document.querySelector(\"[id=domain]\");\n    securityQuestion = document.querySelector(\"[id=security-question]\");\n    securityQuestionDiv = document.querySelector(\"[id=security-question-div]\");\n    userName = document.querySelector(\"[id=user-name]\");\n    userNameDiv = document.querySelector(\"[id=user-name-div]\");\n    type = document.querySelector(\"[id=type]\");\n    passwordCard = document.querySelector(\"[id=password-card]\");\n    passwordCardHeader = document.querySelector(\"[id=password-card-header]\");\n    password = document.querySelector(\".password\");\n    clipboardVal = document.querySelector(\"[id=clipboard-value]\");\n    error = document.querySelector(\".error\");\n    successToast = document.querySelector(\"[id=success-toast]\");\n    copyPasswordButton = document.querySelector(\"[id=copy-password]\");\n    copyPasswordDiv = document.querySelector(\"[id=copy-password-div]\");\n    loaderPassword = document.querySelector(\"[id=load-bar-ball]\");\n    closePasswordButton = document.querySelector(\"[id=close-password]\");\n    bodyNode = document.querySelector(\"body\");\n\n    /* Set-up event listeners for UI */\n\n    //Clear the password when data has changed\n    givenName.addEventListener(\"input\", clearPassword, false);\n    familyName.addEventListener(\"input\", clearPassword, false);\n    passPhrase.addEventListener(\"input\", clearPassword, false);\n    securityQuestion.addEventListener(\"input\", clearPassword, false);\n    domainName.addEventListener(\"input\", clearPassword, false);\n    userName.addEventListener(\"input\", clearPassword, false);\n\n    //Set the pass phrase viewer button when it receieves the focus\n    passPhrase.addEventListener(\"focus\", showPassPhraseDisplayButton, false);\n    passPhrase.addEventListener(\"focusin\", showPassPhraseDisplayButton, false);\n\n    //After domain name has been set, trim all the extra information from it\n    domainName.addEventListener(\"focusout\", trimDomainName, false);\n    domainName.addEventListener(\"blur\", trimDomainName, false);\n\n    //After pass phrase confirmation has been updated, check whether it is OK to decrypt pass phrase\n    confirmPassPhrase.addEventListener(\"input\", checkConfirmation, false);\n\n\n    //Make sure the pass phrase viewer button is hidden when pass phrase doesn't have the foxu\n    givenName.addEventListener(\"focus\", hidePassPhraseDisplayButton, false);\n    givenName.addEventListener(\"focusin\", hidePassPhraseDisplayButton, false);\n    familyName.addEventListener(\"focus\", hidePassPhraseDisplayButton, false);\n    familyName.addEventListener(\"focusin\", hidePassPhraseDisplayButton, false);\n    domainName.addEventListener(\"focus\", hidePassPhraseDisplayButton, false);\n    domainName.addEventListener(\"focusin\", hidePassPhraseDisplayButton, false);\n    securityQuestion.addEventListener(\"focus\", hidePassPhraseDisplayButton, false);\n    securityQuestion.addEventListener(\"focusin\", hidePassPhraseDisplayButton, false);\n    userName.addEventListener(\"focus\", hidePassPhraseDisplayButton, false);\n    userName.addEventListener(\"focusin\", hidePassPhraseDisplayButton, false);\n\n    /* Set up lclick events */\n    //Loop through different values within password type drop down and add one listener for each value\n    for (var lCounter = 0; lCounter < type.children.length; lCounter++) {\n        type.children[lCounter].addEventListener(\"click\", chooseType, false);\n    }\n\n\n    headerKey.addEventListener(\"click\", runTests, false);\n    clearPassPhraseButton.addEventListener(\"click\", clearPassPhraseAndStore, false);\n    clearPassPhraseInStoreButton.addEventListener(\"click\", clearPassPhraseAndStore, false);\n    passPhraseDisplayButton.addEventListener(\"click\", togglePassPhraseView, false);\n\n    generatePasswordButton.addEventListener(\"click\", generatePassword, false);\n    copyPasswordButton.addEventListener(\"click\", copyPasswordToClipboard, false);\n    closePasswordButton.addEventListener(\"click\", clearPassword, false);\n\n    /* Enable UI elements */\n    givenName.disabled = familyName.disabled = passPhrase.disabled = domainName.disabled = userName.disabled = type.disabled = false;\n\n    /*Focus on the given name */\n    givenName.focus();\n\n    //Set initial type of password\n    if (passwordType === undefined) {\n        setType(\"long-password\");\n    }\n\n    //Set initial pass phrase state\n    if (passPhraseState === undefined) {\n        setPassPhraseScreenState(\"editing\");\n    }\n\n\n}, false);\n\n\n/* Clear the generated password, hide the password card and re-set the UI state */\nfunction clearPassword() {\n    hideElement(passwordCard);\n    password.textContent = zeroVar(password.textContent);\n    password.textContent = \"\";\n    setPasswordButton();\n}\n\n/* Clear the stored pass phrase if it exists */\nfunction clearPassPhraseStore() {\n    //Clear any stored values in the phrase store\n    temporaryPhraseStore.clearStore();\n\n    //If this is the chrome extension, send the clear_stored_phrase message to the background script    \n    if (typeof isChromeExtension !== 'undefined') {\n        clearExtPhrase();\n    }\n    //Store the time stamp of when the change was made\n    lastPassGenTimeStamp = Date.now();\n}\n\n/* Clear the pass phrase from the UI */\nfunction clearPassPhrase() {\n    //Clear pass phrase value from the UI\n    passPhrase.value = zeroVar(passPhrase.value);\n    passPhrase.value = \"\";\n    clearPassword();\n}\n\nfunction clearPassPhraseAndStore() {\n    clearPassPhrase();\n    clearPassPhraseStore();\n    setPassPhraseScreenState(\"editing\");\n    passPhrase.focus();\n}\n\n/* Set the pass phrase value for the UI */\nfunction setPassPhrase(passPhraseValue) {\n    passPhrase.value = passPhraseValue;\n    setPassPhraseScreenState(\"holding\");\n    passPhraseTimedClear();\n}\n\n/* Clear the pass phrase value for the UI after 5 minutes if no other activity */\nfunction passPhraseTimedClear() {\n    var thisPasswordTimeStamp;\n\n    //Set timestamp for last generated password\n    lastPassGenTimeStamp = Date.now();\n    thisPasswordTimeStamp = lastPassGenTimeStamp;\n\n    //Set function to clear stored pass phrase after 5 minutes if no other activity has occurred\n    window.setTimeout(function () {\n        //Check of this was the last password generated (timestamp still matches)\n        if (thisPasswordTimeStamp === lastPassGenTimeStamp) {\n            //Too much time has elapsed without any password activity so clear all the values\n            clearPassPhrase();\n            setPassPhraseScreenState(\"stored\");\n        }\n    }, 10000);\n\n}\n\n/* Set-up the UI state for the password being generated, and add values to the temporaryStore  */\nfunction passwordGenerated() {\n    passPhraseTimedClear();\n    //Generate and store the temporaryPhrase values\n    temporaryPhraseStore.encryptPhrase(passPhrase.value, fullName)\n        .then(function (val) {\n            //If this is the chrome extension, send the stored_pass_phrase message to the background script    \n            if (typeof isChromeExtension !== 'undefined') {\n                storeExtPhrase();\n            }\n\n        })\n        .catch(function (err) {\n            console.log(err);\n        });\n\n}\n\n/* Generate the password for the combination of values */\nfunction generatePassword() {\n\n    hidePassPhraseDisplayButton();\n\n    showElement(passwordCard);\n    error.textContent = password.textContent = \"\";\n\n    //hide the copy password div - will be checked after generation to see whether it should be shown\n    hideElement(copyPasswordDiv);\n\n    if (!isReadyToGenerate()) {\n        return;\n    }\n\n\n    //Reset optional values\n    passOff.userName = \"\";\n    passOff.securityQuestion = \"\";\n\n    //Set values required for calculation\n    passOff.fullName = fullName;\n    passOff.passPhrase = passPhrase.value;\n    passOff.domainName = domainName.value.trim();\n    if (userName.value.trim().length > 0) {\n        passOff.userName = userName.value.trim();\n    }\n\n    if (passwordType === \"answer\" && securityQuestion.value.trim().length > 0) {\n        //Remove any punctuation, remove any consecutive spaces and convert to lower case\n        passOff.securityQuestion = securityQuestion.value.trim();\n    }\n\n    if (passwordType) {\n        passOff.generatePassword(passwordType)\n            .then(function (passwordValue) {\n                clearBodyClasses();\n                //Special classes are required when running as an extenstion due to the space limitations of the chrome extension pop-up\n                if (passwordType === \"answer\") {\n                    bodyNode.classList.add(\"ext-answer-generated\");\n\n                } else {\n                    bodyNode.classList.add(\"ext-pass-generated\");\n                }\n\n\n                password.textContent = passwordValue;\n                hideElement(loaderPassword);\n\n                populateOrCopyPassword();\n\n                passwordGenerated();\n\n                setPassPhraseScreenState(\"holding\");\n\n            })\n            .catch(function (err) {\n                error.textContent = err.message;\n            });\n    }\n\n}\n\n/* After the password is generated decide whether to insert it directly or attempt to copy it to the clipboard.\n   When running as a chrome extension, check whether the extension detected a single password field on the page.\n   When running stand alone, try to copy to the clipboard. N.B. This seems to be disabled in Chrome 46 and onwards.\n*/\nfunction populateOrCopyPassword() {\n    var executePasswordCopy = false;\n\n    //Check if this is running within a Chrome extension and a password or PIN is being generated\n    if (typeof isChromeExtension !== 'undefined') {\n        //Call the extension password set function\n        generateExtPassword();\n\n        //Check whether the extension can directly set the password or PIN and if it the correct type\n        //If password can't be set or it is another type (user name or answer) it will just copy to cliboard instead\n        if (extHasPassword !== true || passwordCardHeader.textContent === \"User name\" || passwordCardHeader.textContent === \"Answer\") {\n            executePasswordCopy = true;\n        } else {\n            //Password will be directly inserted by ext-backgrounf.js, so show a password / pin inserted toast\n            successToast.textContent = successPrefix + \" inserted\";\n            window.setTimeout(function () {\n                showToast(successToast, copyPasswordDiv);\n            }, 250);\n        }\n\n    } else {\n        //Not running in an extension so attempt to copy the password to the cliboard\n        executePasswordCopy = true;\n    }\n\n\n    if (executePasswordCopy) {\n        showElement(copyPasswordDiv);\n        password.scrollIntoView();\n        //Copy password to clipboard after 0.2 second\n        window.setTimeout(function () {\n            copyPasswordToClipboard();\n        }, 500);\n\n    }\n\n}\n\n/*Set up the screen state for the pass phrase: \n        editing: pass phrase has been cleared or pass phrase is being edited and no password has been generated with it yet\n        holding: pass phrase is being held for a short period - it can be used by it cannot be viewed or edited - must be cleared to edit\n        stored: pass phrase is encrypted in temporary storage - requires correct first three characters to decrypt and return \n        failed: pass phrase was encrypted but confirmation of first three characters failed.  Pass phrase was cleared and UI is updated\n*/\nfunction setPassPhraseScreenState(passState) {\n\n    passPhraseState = passState;\n\n    if (passState === \"editing\") {\n        //The pass phrase characters are hidden but can be viewed using the show-password button\n        //Show the pass phrase with the show password buttton\n        //Hide the confirm pass phrase\n        showElement(passPhraseDiv);\n        hideElement(confirmPassPhraseDiv);\n        hideElement(clearPassPhraseButton);\n\n\n    } else if (passState === \"holding\") {\n        //The pass phrase characters are hidden and cannot be viewed but can be used\n        //Password can be cleared and edited using the clear-password button\n        //Show the pass phrase with the edit password buttton\n        //Hide the confirm pass phrase\n        showElement(passPhraseDiv);\n        hideElement(confirmPassPhraseDiv);\n\n    } else if (passState === \"stored\") {\n        //The pass phrase characters have been encrypted.  It can be retrieved using the first three characters. \n        //Password can be cleared and edited using the clear-password button\n        //Show the confirm pass phrase with the edit password buttton\n        //Hide the pass phrase\n        var dialog = document.querySelector('.mdl-js-dialog');\n        // Showing the dialog\n        dialog.MaterialDialog.show();\n        //hideElement(passPhraseDiv);\n        //showElement(confirmPassPhraseDiv);\n        //confirmPassPhrase.focus();\n\n    } else if (passState === \"failed\") {\n        //An attempt to confirm the first three characters of the pass phrase failed.\n        //The pass phrase characters are hidden but can be viewed using the show-password button\n        //Show the pass phrase with the show password buttton but update the UI prompt\n        //Hide the confirm pass phrase\n\n        showToast(failureToast, confirmPassPhraseDiv);\n        window.setTimeout(function () {\n            setPassPhraseScreenState(\"editing\");\n            passPhrase.focus();\n        }, 5250);\n\n\n    }\n}\n\n/* Checks when three characters have been typed and then calls the confirmation decryption*/\nfunction checkConfirmation() {\n    if (confirmPassPhrase.value.length === 3) {\n        confirmThreeChars(confirmPassPhrase.value, fullName);\n        zeroVar(confirmPassPhrase.value);\n        confirmPassPhrase.value = \"\";\n    }\n}\n\n\n/* Attempts to decrypt pass phrase using the first three characters*/\nfunction confirmThreeChars(threeChars, Name) {\n    //Attempt decryption - if succesfull set passphrase value \n    temporaryPhraseStore.decryptPhrase(threeChars, Name)\n        .then(function (plainText) {\n            setPassPhrase(plainText);\n            setPassPhraseScreenState(\"holding\");\n            setPasswordButton();\n        })\n        .catch(function (err) {\n            clearPassPhraseStore();\n            clearPassPhrase();\n            setPassPhraseScreenState(\"failed\");\n        });\n\n\n}\n\n/*Checks whether required elements are present to generate a password  */\nfunction isReadyToGenerate() {\n\n    //Make sure the domain name value has been trimmed\n    trimDomainName();\n\n    //Trim of any www prefix, eg 'www.'  , 'www1.', 'www-87.' \n    var calculatedDomainName = domainName.value.replace(/^www[\\w-]*./g, \"\").trim().toLowerCase();\n\n    //If the value is only \"w\", \"ww\", \"www\", or \"www.\" then treat as a non-value\n    if (calculatedDomainName === \"w\" || calculatedDomainName === \"ww\" || calculatedDomainName === \"www\") {\n        calculatedDomainName = \"\";\n    }\n\n    //Check if minimum values have been completed - all types need name and domain\n    if ((givenName.value.trim().length > 0 || familyName.value.trim().length > 0) && passPhrase.value.trim().length > 0 && calculatedDomainName.length > 0 &&\n        //For an answer type, a question must also be set \n        (passwordType !== \"answer\" || securityQuestion.value.trim().length > 0)) {\n        fullName = givenName.value.trim() + familyName.value.trim();\n        return true;\n    } else {\n        return false;\n    }\n\n}\n\n/* Trims the value displayed on the website field to remove the leading http(s):// and anything including and after a forward slash */\nfunction trimDomainName() {\n    var posDomain = 0;\n\n    /*Retrieve domain value and trim the leading http:// or https:// */\n    domainName.value = domainName.value.replace(/^https?:\\/\\//g, \"\").toLowerCase().trim();\n\n    //Check whether the whole URL is there - remove anything with a '/' onwards\n    posDomain = domainName.value.indexOf(\"/\");\n    if (posDomain > 0) {\n        domainName.value = domainName.value.substr(0, posDomain);\n    }\n\n}\n\n/* Set the Produce Password button to enabled or disabled depending on the state of the UI elements */\nfunction setPasswordButton() {\n\n    if (isReadyToGenerate()) {\n        generatePasswordButton.disabled = false;\n    } else {\n        generatePasswordButton.disabled = true;\n    }\n\n    hideElement(copyPasswordDiv);\n}\n\n/*Removes the hidden class for an element */\nfunction showElement(element) {\n    element.classList.remove(\"hidden\");\n}\n\n/*Adds the hidden class for an element */\nfunction hideElement(element) {\n    element.classList.add(\"hidden\");\n}\n\n/*Removes the special classes required when running as a chrome extension */\nfunction clearBodyClasses() {\n    bodyNode.classList.remove(\"ext-pass\");\n    bodyNode.classList.remove(\"ext-answer\");\n    bodyNode.classList.remove(\"ext-pass-generated\");\n    bodyNode.classList.remove(\"ext-answer-generated\");\n}\n\n/*Copy the password text to the clipboard if supported by the browser */\nfunction copyPasswordToClipboard() {\n    clipboardVal.value = password.textContent;\n    clipboardVal.select();\n\n    try {\n        // Now that we've selected the anchor text, execute the copy command  \n        if (document.execCommand('copy')) {\n            successToast.textContent = successPrefix + \" copied to Clipboard\";\n            showToast(successToast, copyPasswordDiv);\n        }\n\n    } catch (err) {\n        hideElement(copyPasswordDiv);\n        console.log(\"Copy command failed\");\n    }\n}\n\n/*Set password type function for the event listener - uses the id of the drop down control to set the password type */\nfunction chooseType() {\n    setType(this.id);\n}\n\n/*Set the password type to produce */\nfunction setType(passwordSelection) {\n    //console.log('Set password type:' + passwordSelection);\n    copyPasswordButton.textContent = \"Copy Password\";\n    successPrefix = \"Password\";\n    passwordCardHeader.textContent = \"Password\";\n    showElement(userNameDiv);\n    hideElement(securityQuestionDiv);\n    passwordType = passwordSelection;\n\n\n    switch (passwordSelection) {\n        case \"login\":\n            generatePasswordButton.textContent = \"User name\";\n            copyPasswordButton.textContent = \"Copy User name\";\n            successPrefix = \"User name\";\n            passwordCardHeader.textContent = \"User name\";\n            hideElement(userNameDiv);\n            break;\n        case \"maximum-password\":\n            generatePasswordButton.textContent = \"Produce Maximum Password\";\n            break;\n        case \"long-password\":\n            generatePasswordButton.textContent = \"Produce Long Password\";\n            break;\n        case \"medium-password\":\n            generatePasswordButton.textContent = \"Produce Medium Password\";\n            break;\n        case \"basic-password\":\n            generatePasswordButton.textContent = \"Produce Basic Password\";\n            break;\n        case \"short-password\":\n            generatePasswordButton.textContent = \"Produce Short Password\";\n            break;\n        case \"pin\":\n            generatePasswordButton.textContent = \"Produce Four Digit PIN\";\n            copyPasswordButton.textContent = \"Copy PIN\";\n            successPrefix = \"PIN\";\n            passwordCardHeader.textContent = \"PIN\";\n            break;\n        case \"pin-6\":\n            generatePasswordButton.textContent = \"Produce Six Digit PIN\";\n            copyPasswordButton.textContent = \"Copy PIN\";\n            successPrefix = \"PIN\";\n            passwordCardHeader.textContent = \"PIN\";\n            break;\n        case \"answer\":\n            generatePasswordButton.textContent = \"Produce Security Answer\";\n            copyPasswordButton.textContent = \"Copy Security Answer\";\n            successPrefix = \"Answer\";\n            passwordCardHeader.textContent = \"Answer\";\n            showElement(securityQuestionDiv);\n            break;\n    }\n\n    clearBodyClasses();\n    if (passwordType === \"answer\") {\n        bodyNode.classList.add(\"ext-answer\");\n\n    } else {\n        bodyNode.classList.add(\"ext-pass\");\n    }\n\n    //Clear password and hide password div\n    clearPassword();\n}\n\n/*Show the pass phrase viewer button */\nfunction showPassPhraseDisplayButton() {\n    if (passPhraseState === \"editing\" || passPhraseState === \"faailed\") {\n        showElement(passPhraseDisplayButton);\n    } else if (passPhraseState === \"holding\") {\n        showElement(clearPassPhraseButton);\n    }\n}\n\n/*Hide the pass phrase viewer button and make sure the characters are masked */\nfunction hidePassPhraseDisplayButton() {\n    hideElement(passPhraseDisplayButton);\n    hideElement(clearPassPhraseButton);\n    passPhrase.type = \"password\";\n}\n\n/*Toggle pass phrase between visible as a text area, and obscured like a normal password */\nfunction togglePassPhraseView() {\n    if (passPhrase.type === \"password\") {\n        passPhrase.type = \"text-area\";\n    } else {\n        passPhrase.type = \"password\";\n    }\n\n    passPhrase.focus();\n\n}\n\n/* Open and run the Jasmine tests page */\nfunction runTests() {\n    if (typeof isChromeExtension !== 'undefined') {\n        window.open(\"https://mrpeel.github.io/opensesame/test/opensesame-test.html\");\n    } else {\n        window.open(\"test/opensesame-test.html\");\n    }\n\n}\n\n/* Display a toast message for 5 seconds */\nfunction showToast(toastElement, coveredElement) {\n    //Show toast element\n    hideElement(coveredElement);\n    showElement(toastElement);\n\n    toastElement.scrollIntoView();\n    //Hide again after 5 seconds\n    window.setTimeout(function () {\n        hideToast(toastElement, coveredElement);\n    }, 5200);\n}\n\n/* Hide a toast message */\nfunction hideToast(toastElement, coveredElement) {\n    showElement(coveredElement);\n    hideElement(toastElement);\n}\n\n\nfunction setPassChangeRequired() {\n    var thisPasswordTimeStamp;\n\n    //Set the more changes required to 2 \n    passChangeRequiredCount = 2;\n\n    //Set the length to the current pass phrase length\n    // This is an atttempt to give a little more security - a user can't just type in extra characters to reveal\n    //  the password.  Some of the characters need to be changed (still easy to work around)\n    lastPassPhraseLength = passPhrase.value.length;\n\n    //Set timestamp for last generated password\n    lastPassGenTimeStamp = Date.now();\n    thisPasswordTimeStamp = lastPassGenTimeStamp;\n\n    //Set function to clear passwords after 30 minutes if no other activity has occurred\n    window.setTimeout(function () {\n        //Check of this was the last password generated (timestamp still matches)\n        if (thisPasswordTimeStamp === lastPassGenTimeStamp) {\n            //Too much time has elapsed without any password activity so clear all the values\n            clearPassPhrase();\n        }\n    }, 1800000);\n}\n\nfunction changePassPhrase() {\n    clearPassword();\n    showPassPhraseDisplayButton();\n}\n","/*global chrome, alert, console, document, givenName, familyName, passPhrase, password, domainName, passwordType, setType, temporaryPhraseStore, setPassPhraseScreenState, setPassPhrase */\n\n//Extra variable only present for Chrome Extension\nvar isChromeExtension = true;\nvar extHasPassword;\n\n\ndocument.addEventListener('DOMContentLoaded', function () {\n    // Send a message to the active tab\n    chrome.tabs.query({\n        active: true,\n        currentWindow: true\n    }, function (tabs) {\n        var activeTab = tabs[0];\n        chrome.tabs.sendMessage(activeTab.id, {\n            \"message\": \"clicked_browser_action\"\n        });\n    });\n\n});\n\n\nchrome.runtime.onMessage.addListener(\n    function (request, sender, sendResponse) {\n        if (request.message === \"populate_fields\") {\n            domainName.value = request.url;\n            givenName.value = request.givenName;\n            familyName.value = request.familyName;\n            extHasPassword = request.hasPassword;\n\n            //console.log('Populate fields password type: ' + request.passwordType);\n            setType(request.passwordType);\n        }\n\n        if (domainName.value.length > 0) {\n            setValuePopulated(domainName);\n        }\n        if (givenName.value.length > 0) {\n            setValuePopulated(givenName);\n        }\n        if (familyName.value.length > 0) {\n            setValuePopulated(familyName);\n        }\n        //Determine state of password, and set the appropriate values\n        if (request.passPhrase.length > 0) {\n            //Pass phrase is still being held\n            setValuePopulated(passPhrase);\n            setPassPhrase(request.passPhrase);\n            setPassPhraseScreenState(\"holding\");\n        } else if (request.threeCharHash.length > 0 && typeof request.phraseStore.iv !== \"undefined\") {\n            //Pass phrase has been encrypted and requires confirmation of the first three characters\n            temporaryPhraseStore.storeValues(request.threeCharHash, request.phraseStore);\n            setPassPhraseScreenState(\"stored\");\n        } else {\n            //Pass phrase is not stored at all and is in standard editing mode\n            setPassPhraseScreenState(\"editing\");\n        }\n\n    }\n);\n\nfunction generateExtPassword() {\n\n    chrome.runtime.sendMessage({\n        \"message\": \"set_password\",\n        \"givenName\": givenName.value,\n        \"familyName\": familyName.value,\n        \"passPhrase\": passPhrase.value,\n        \"password\": password.textContent,\n        \"passwordType\": passwordType\n    });\n\n}\n\nfunction storeExtPhrase() {\n\n    chrome.runtime.sendMessage({\n        \"message\": \"store_phrase\",\n        \"threeCharHash\": temporaryPhraseStore.threeCharHash,\n        \"phraseStore\": temporaryPhraseStore.encData\n    });\n\n}\n\n\nfunction clearExtPhrase() {\n\n    chrome.runtime.sendMessage({\n        \"message\": \"clear_stored_phrase\"\n    });\n\n}\n\n\n\nfunction setValuePopulated(pElement) {\n\n    pElement.parentElement.classList.add(\"is-dirty\");\n\n}\n","/*global CryptoJS, Promise, console, Uint8Array, window, TextEncoder, TextDecoder */\n\n/* Ensure functions are always adressable after minification / compilation */\nwindow['PBKDF2'] = PBKDF2;\nwindow['HMACSHA256'] = HMACSHA256;\nwindow['aesEncrypt'] = aesEncrypt;\nwindow['aesDecrypt'] = aesDecrypt;\nwindow['convertDerivedKeyToHex'] = convertDerivedKeyToHex;\nwindow['convertWordArrayToHex'] = convertWordArrayToHex;\nwindow['convertWordArrayToUint8Array'] = convertWordArrayToUint8Array;\nwindow['convertUint8ArrayToHex'] = convertUint8ArrayToHex;\nwindow['convertHexToUint8Array'] = convertHexToUint8Array;\nwindow['zeroVar'] = zeroVar;\nwindow['zeroIntArray'] = zeroIntArray;\n\n/**\n * Executes the PBKDF2 function.  If crypto subtle is supported it is used.  If not,  the CryptoJS PBKDF2 function is wrapped\n * in a promise.   Either way, it returns the derived key\n * @param {password, salt, numIterations, keylength} the password to perform the function on, the salt to apply, the number of iterations to \n *     perform, and the length for the derived key\n * @return {Promise} A promise which resolves to the derived key.\n */\n\n\nfunction PBKDF2(password, salt, numIterations, keyLength) {\n    \"use strict\";\n\n    if (window.crypto && window.crypto.subtle) {\n        //use the subtle crypto functions\n        var cryptoTextEncoder = new TextEncoder(\"utf-8\");\n\n        var saltBuffer = cryptoTextEncoder.encode(salt);\n        var passwordBuffer = cryptoTextEncoder.encode(password);\n\n        return window.crypto.subtle.importKey('raw', passwordBuffer, {\n            name: 'PBKDF2'\n        }, false, ['deriveBits']).then(function (key) {\n            return window.crypto.subtle.deriveBits({\n                name: 'PBKDF2',\n                iterations: numIterations,\n                salt: saltBuffer,\n                hash: 'SHA-1'\n            }, key, keyLength);\n        });\n\n    } else {\n        //use the CryptJS function\n\n        return new Promise(function (resolve, reject) {\n            var derivedKey = CryptoJS.PBKDF2(password, salt, {\n                iterations: numIterations,\n                keySize: keyLength / 32\n            });\n\n            resolve(derivedKey);\n        });\n    }\n\n}\n\n/**\n * Executes the HMAC-SHA256 function.  If crypto subtle is supported it is used.  If not,  the CryptoJS HmacSHA256 function is wrapped\n * in a promise, the converts the Word Array to a Uint8Array.  Returns the MAC as a Uint8Array.\n * @param {plainText, key} The plaintext data to be signed and the key to use for the signing.\n * @return {Promise} A promise which resolves a Uint8Array with the MAC.\n */\n\nfunction HMACSHA256(plainText, key) {\n    \"use strict\";\n\n    if (window.crypto && window.crypto.subtle) {\n        //use the subtle crypto functions\n        return new Promise(function (resolve, reject) {\n\n            var cryptoTextEncoder = new TextEncoder(\"utf-8\");\n            var plainTextBuffer = cryptoTextEncoder.encode(plainText);\n\n            window.crypto.subtle.importKey(\"raw\", key, {\n                    name: \"HMAC\",\n                    hash: {\n                        name: \"SHA-256\"\n                    }\n                }, false /*not extractable*/ , [\"sign\"])\n                .then(function (importedKey) {\n\n                    return window.crypto.subtle.sign({\n                        name: \"HMAC\",\n                        hash: {\n                            name: \"SHA-256\"\n                        }\n                    }, importedKey, plainTextBuffer);\n                })\n                .then(function (mac) {\n                    var macArray = new Uint8Array(mac);\n\n                    resolve(macArray);\n                });\n        });\n\n    } else {\n        //use the CryptJS function\n        return new Promise(function (resolve, reject) {\n            var mac = CryptoJS.HmacSHA256(plainText, key);\n            var macArray = convertWordArrayToUint8Array(mac);\n            //Convert to uInt8Array\n            resolve(macArray);\n        });\n    }\n}\n\n/**\n * Executes an AES encryption.  If crypto subtle is supported it is used.  If not,  the CryptoJS AES encryption function is wrapped in a promise.\n * Returns the encrypted data.\n * @param {plainText, key} The plaintext data to be encrypted and the encryption key as a hex string.\n * @return {Promise} A promise which resolves to the encryted data.\n */\nfunction aesEncrypt(plainText, key) {\n    \"use strict\";\n\n    if (window.crypto && window.crypto.subtle) {\n        //use the subtle crypto functions\n        return new Promise(function (resolve, reject) {\n            var cryptoTextEncoder = new TextEncoder(\"utf-8\");\n            var plainTextBuffer = cryptoTextEncoder.encode(plainText);\n\n            //Key will be supplied in hex - so need to convert to Uint8Array\n            var aesKey = convertHexToUint8Array(key);\n\n            //Create random initialisation vector\n            var iv = window.crypto.getRandomValues(new Uint8Array(16));\n\n            window.crypto.subtle.importKey(\"raw\", aesKey, {\n                    name: \"AES-CBC\",\n                    length: 128\n                }, false /*not extractable*/ , [\"encrypt\"])\n                .then(function (importedKey) {\n\n\n                    return window.crypto.subtle.encrypt({\n                        \"name\": \"AES-CBC\",\n                        iv: iv\n                    }, importedKey, plainTextBuffer);\n                })\n                .then(function (encryptedData) {\n                    var encryptedArray = new Uint8Array(encryptedData);\n\n                    resolve({\n                        iv: iv,\n                        ciphertext: encryptedArray\n                    }); //Return an object so the iv is contained with the ciphertext\n                });\n        });\n    } else {\n        //use the CryptJS function\n        return new Promise(function (resolve, reject) {\n            var encrypted = CryptoJS.AES.encrypt(plainText, key);\n            resolve(encrypted);\n        });\n    }\n\n}\n\n/**\n * Executes an AES decryption.  If crypto subtle is supported it is used.  If not,  the CryptoJS AES decryption function is wrapped in a promise.\n * Returns the decrypted data.\n * @param {cipherText, key} The ciphertext data to be decrypted and the decryption key as a hex string.\n * @return {Promise} A promise which resolves to the plain text data.\n */\nfunction aesDecrypt(encyptedData, key) {\n    \"use strict\";\n\n\n    if (window.crypto && window.crypto.subtle) {\n        //use the subtle crypto functions\n        return new Promise(function (resolve, reject) {\n            //Key will be supplied in hex - so need to convert to Uint8Array\n            var cryptoTextEncoder = new TextEncoder(\"utf-8\");\n            var cryptoTextDecoder = new TextDecoder(\"utf-8\");\n            var aesKey = convertHexToUint8Array(key);\n\n            window.crypto.subtle.importKey(\"raw\", aesKey, {\n                    name: \"AES-CBC\",\n                    length: 128\n                }, false /*not extractable*/ , [\"decrypt\"])\n                .then(function (importedKey) {\n\n                    return window.crypto.subtle.decrypt({\n                            name: \"AES-CBC\",\n                            iv: encyptedData.iv // Same IV as for encryption\n                        },\n                        importedKey,\n                        encyptedData.ciphertext\n                    );\n                })\n                .then(function (decryptedData) {\n                    var decryptedArray = new Uint8Array(decryptedData);\n                    var plainText = cryptoTextDecoder.decode(decryptedArray);\n\n                    resolve(plainText);\n                });\n        });\n\n    } else {\n        //use the CryptJS function\n        return new Promise(function (resolve, reject) {\n            var decrypted = CryptoJS.AES.decrypt(encyptedData, key);\n\n            //var decryptedArray = cryptoContext.convertWordArrayToUint8Array(decrypted);\n            //var plainText = cryptoContext.cryptoTextDecoder.decode(decryptedArray);\n\n            var plainText = CryptoJS.enc.Utf8.stringify(decrypted);\n            resolve(plainText);\n        });\n    }\n\n\n}\n\n/**\n * Converts a derived key to a hex string.  Determines whether using subtle crypto of CryptoJS and uses appropriate function\n * @param {wordArray / bufffer} derivedKey.\n * @return {String}.\n */\nfunction convertDerivedKeyToHex(derivedKey) {\n    \"use strict\";\n\n    if (window.crypto && window.crypto.subtle) {\n        return convertUint8ArrayToHex(new Uint8Array(derivedKey));\n\n    } else {\n        return convertUint8ArrayToHex(convertWordArrayToUint8Array(derivedKey));\n\n    }\n\n\n}\n\n/**\n * Converts a word array into a Hex String by chaining together canversion to Uint8Array, then to hex \n * @param {word array} wordArray .\n * @return {String}.\n */\nfunction convertWordArrayToHex(wordArray) {\n    \"use strict\";\n\n    return convertUint8ArrayToHex(convertWordArrayToUint8Array(wordArray));\n\n}\n\n/**\n * Converts a word array into a Uint8Array. \n * @param {word array} wordArray .\n * @return {Uint8Array}.\n */\nfunction convertWordArrayToUint8Array(wordArray) {\n    \"use strict\";\n\n    var words = wordArray.words;\n    var sigBytes = wordArray.sigBytes;\n\n    // Convert\n    var u8 = new Uint8Array(sigBytes);\n    for (var i = 0; i < sigBytes; i++) {\n        var byte = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n        u8[i] = byte;\n    }\n\n    return u8;\n\n}\n\n/**\n * Converts a Uint8Array into a Uint8Array to a hex string. \n * @param {u8Array} Uint8Array.\n * @return {String}.\n */\nfunction convertUint8ArrayToHex(u8Array) {\n    var i;\n    var len;\n    var hex = '';\n    var c;\n\n    for (i = 0, len = u8Array.length; i < len; i += 1) {\n        c = u8Array[i].toString(16);\n        if (c.length < 2) {\n            c = '0' + c;\n        }\n        hex += c;\n    }\n\n    return hex;\n}\n\n\n/**\n * Converts a Hex string into a Uint8Array. \n * @param {hex} String.\n * @return {Uint8Array}.\n */\nfunction convertHexToUint8Array(hex) {\n    var i;\n    var byteLen = hex.length / 2;\n    var arr;\n    var j = 0;\n\n    if (byteLen !== parseInt(byteLen, 10)) {\n        throw new Error(\"Invalid hex length '\" + hex.length + \"'\");\n    }\n\n    arr = new Uint8Array(byteLen);\n\n    for (i = 0; i < byteLen; i += 1) {\n        arr[i] = parseInt(hex[j] + hex[j + 1], 16);\n        j += 2;\n    }\n\n    return arr;\n}\n\n/** Utility function to replace a string's value with all zeroes\n */\nfunction zeroVar(varToZero) {\n    return Array(varToZero.length).join(\"0\");\n\n}\n\n/** Utility function to replace an array's value with all zeroes\n */\nfunction zeroIntArray(arrayToZero) {\n    var holdingVal = arrayToZero;\n    for (var aCounter = 0; aCounter < arrayToZero.length; aCounter++) {\n        holdingVal[aCounter] = 0;\n    }\n    return holdingVal;\n\n}\n","/** Passoff class encapsulating the functionality for generating a password.\n    Requires cryptofunctions.js which determies whether to use subtle crypto or cryptojs\n    and executes the appropriate functions.\n*/\n\n/*global CryptoJS, Promise, performance, console, Uint8Array */\n\n/* Functions defined in cryptofunctions.js */\n/* global PBKDF2, HMACSHA256, aesEncrypt, aesDecrypt, convertDerivedKeyToHex, convertWordArrayToHex, convertWordArrayToUint8Array, convertUint8ArrayToHex, convertHexToUint8Array, zeroVar, zeroIntArray */\n\n/** \n * \n * PassOff uses BKDF2 to generate salted password and HMAC256 to generate a seed.  The seed is then ued to generate a password based on\n    a chosen template.\n */\nvar PassOff = function () {\n    \"use strict\";\n\n    // The namespace used in calculateKey\n    this.keyNS = \"cake.man.passoff\";\n\n    // The namespaces used in calculateSeed\n    this.passwordNS = \"cake.man.passoff.password\";\n    this.loginNS = \"cake.man.passoff.login\";\n    this.answerNS = \"cake.man.passoff.answer\";\n\n    //The values which will be populated for creating the password\n    this.fullName = '';\n    this.passPhrase = '';\n    this.domainName = '';\n    this.userName = '';\n    this.securityQuestion = '';\n\n\n    // The templates that passwords may be created from\n    // The characters map to MPW.passchars\n    this.templates = {\n        \"maximum-password\": [\n\t\t\"anoxxxxxxxxxxxxxxxxx\",\n\t\t\"axxxxxxxxxxxxxxxxxno\"\n\t],\n        \"long-password\": [\n\t\t\"CvcvnoCvcvCvcv\",\n\t\t\"CvcvCvcvnoCvcv\",\n\t\t\"CvcvCvcvCvcvno\",\n\t\t\"CvccnoCvcvCvcv\",\n\t\t\"CvccCvcvnoCvcv\",\n\t\t\"CvccCvcvCvcvno\",\n\t\t\"CvcvnoCvccCvcv\",\n\t\t\"CvcvCvccnoCvcv\",\n\t\t\"CvcvCvccCvcvno\",\n\t\t\"CvcvnoCvcvCvcc\",\n\t\t\"CvcvCvcvnoCvcc\",\n\t\t\"CvcvCvcvCvccno\",\n\t\t\"CvccnoCvccCvcv\",\n\t\t\"CvccCvccnoCvcv\",\n\t\t\"CvccCvccCvcvno\",\n\t\t\"CvcvnoCvccCvcc\",\n\t\t\"CvcvCvccnoCvcc\",\n\t\t\"CvcvCvccCvccno\",\n\t\t\"CvccnoCvcvCvcc\",\n\t\t\"CvccCvcvnoCvcc\",\n\t\t\"CvccCvcvCvccno\"\n\t],\n        \"medium-password\": [\n\t\t\"CvcnoCvc\",\n\t\t\"CvcCvcno\"\n\t],\n        \"basic-password\": [\n\t\t\"aaanaaan\",\n\t\t\"aannaaan\",\n\t\t\"aaannaaa\"\n\t],\n        \"short-password\": [\n\t\t\"Cvcn\"\n\t],\n        pin: [\n\t\t\"nnnn\"\n\t],\n        \"pin-6\": [\n\t\t\"nnnnnn\"\n\t],\n        login: [\n\t\t\"cvccvcvcv\"\n\t],\n        answer: [\n\t\t\"cvcc cvc cvccvcv cvc\",\n\t\t\"cvc cvccvcvcv cvcv\",\n\t\t\"cv cvccv cvc cvcvccv\"\n\t]\n    };\n\n    // The password character mapping\n    // c in template becomes bcdfghjklmnpqrstvwxyz\n    this.passchars = {\n        V: \"AEIOU\",\n        C: \"BCDFGHJKLMNPQRSTVWXYZ\",\n        v: \"aeiou\",\n        c: \"bcdfghjklmnpqrstvwxyz\",\n        A: \"AEIOUBCDFGHJKLMNPQRSTVWXYZ\",\n        a: \"AEIOUaeiouBCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\",\n        n: \"0123456789\",\n        o: \"@&%?,=[]_:-+*$#!'^~;()/.\",\n        x: \"AEIOUaeiouBCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz0123456789!@#$%^&*()\",\n        \" \": \" \"\n    };\n\n    // All the country top level domain suffixes - used for determining the domain from a URL\n    // N.B. \".io\" has been excluded becuase it is used like .com, eg github.io \n    this.countryTLDs = [\"ac\", \"ad\", \"ae\", \"af\", \"ag\", \"ai\", \"al\", \"am\", \"an\", \"ao\", \"aq\", \"ar\", \"as\", \"at\", \"au\", \"aw\", \"ax\", \"az\", \"ba\",\n                        \"bb\", \"bd\", \"be\", \"bf\", \"bg\", \"bh\", \"bi\", \"bj\", \"bm\", \"bn\", \"bo\", \"br\", \"bs\", \"bt\", \"bv\", \"bw\", \"by\", \"bz\", \"ca\",\n                        \"cc\", \"cd\", \"cf\", \"cg\", \"ch\", \"ci\", \"ck\", \"cl\", \"cm\", \"cn\", \"co\", \"cr\", \"cs\", \"cu\", \"cv\", \"cw\", \"cx\", \"cy\", \"cz\",\n                        \"dd\", \"de\", \"dj\", \"dk\", \"dm\", \"do\", \"dz\", \"ec\", \"ee\", \"eg\", \"eh\", \"er\", \"es\", \"et\", \"eu\", \"fi\", \"fj\", \"fk\", \"fm\",\n                        \"fo\", \"fr\", \"ga\", \"gb\", \"gd\", \"ge\", \"gf\", \"gg\", \"gh\", \"gi\", \"gl\", \"gm\", \"gn\", \"gp\", \"gq\", \"gr\", \"gs\", \"gt\", \"gu\",\n                        \"gw\", \"gy\", \"hk\", \"hm\", \"hn\", \"hr\", \"ht\", \"hu\", \"id\", \"ie\", \"il\", \"im\", \"in\", /*\"io\",*/ \"iq\", \"ir\", \"is\", \"it\", \"je\",\n                        \"jm\", \"jo\", \"jp\", \"ke\", \"kg\", \"kh\", \"ki\", \"km\", \"kn\", \"kp\", \"kr\", \"kw\", \"ky\", \"kz\", \"la\", \"lb\", \"lc\", \"li\", \"lk\",\n                        \"lr\", \"ls\", \"lt\", \"lu\", \"lv\", \"ly\", \"ma\", \"mc\", \"md\", \"me\", \"mg\", \"mh\", \"mk\", \"ml\", \"mm\", \"mn\", \"mo\", \"mp\", \"mq\",\n                        \"mr\", \"ms\", \"mt\", \"mu\", \"mv\", \"mw\", \"mx\", \"my\", \"mz\", \"na\", \"nc\", \"ne\", \"nf\", \"ng\", \"ni\", \"nl\", \"no\", \"np\", \"nr\",\n                        \"nu\", \"nz\", \"om\", \"pa\", \"pe\", \"pf\", \"pg\", \"ph\", \"pk\", \"pl\", \"pm\", \"pn\", \"pr\", \"ps\", \"pt\", \"pw\", \"py\", \"qa\", \"re\",\n                        \"ro\", \"rs\", \"ru\", \"rw\", \"sa\", \"sb\", \"sc\", \"sd\", \"se\", \"sg\", \"sh\", \"si\", \"sj\", \"sk\", \"sl\", \"sm\", \"sn\", \"so\", \"sr\",\n                        \"ss\", \"st\", \"su\", \"sv\", \"sx\", \"sy\", \"sz\", \"tc\", \"td\", \"tf\", \"tg\", \"th\", \"tj\", \"tk\", \"tl\", \"tm\", \"tn\", \"to\", \"tp\",\n                        \"tr\", \"tt\", \"tv\", \"tw\", \"tz\", \"ua\", \"ug\", \"uk\", \"us\", \"uy\", \"uz\", \"va\", \"vc\", \"ve\", \"vg\", \"vi\", \"vn\", \"vu\", \"wf\",\n                        \"ws\", \"ye\", \"yt\", \"yu\", \"za\", \"zm\", \"zw\"];\n\n};\n\n/**\n * Wraps the CryptoJS PBKDF2 function in a promise and returns a key\n * @param {Object} queryParams The request parameters.\n * @return {Promise} A promise.\n */\n/*PassOff.prototype.PBKDF2 = function (password, salt) {\n    \"use strict\";\n\n    return new Promise(function (resolve, reject) {\n        var derivedKey = CryptoJS.PBKDF2(password, salt, {\n            iterations: 750,\n            keySize: 128 / 32\n        });\n\n        resolve(derivedKey);\n    });\n\n};*/\n\n/**\n * Wraps the CryptoJS HMAC256 function in a promise and returns signed data as a word array\n * @param {Object} queryParams The request parameters.\n * @return {Promise} A promise.\n */\n\n/*PassOff.prototype.HMACSHA256 = function (plainText, key) {\n    \"use strict\";\n\n    return new Promise(function (resolve, reject) {\n        var seed = CryptoJS.HmacSHA256(plainText, key);\n\n        resolve(seed);\n    });\n\n};*/\n\n/**\n * Converts a word array into a Uint8Array to convert to use as a numeric array. \n * Assumes wordArray is Big-Endian (because it comes from CryptoJS which is all BE)\n * @param {word array} wordArray .\n * @return {Uint8Array}.\n */\n/*PassOff.prototype.convertWordArrayToUint8Array = function (wordArray) {\n    \"use strict\";\n\n    var len = wordArray.words.length,\n        u8_array = new Uint8Array(len << 2),\n        offset = 0,\n        word, i;\n\n    for (i = 0; i < len; i++) {\n        word = wordArray.words[i];\n        u8_array[offset++] = word >> 24;\n        u8_array[offset++] = (word >> 16) & 0xff;\n        u8_array[offset++] = (word >> 8) & 0xff;\n        u8_array[offset++] = word & 0xff;\n    }\n\n    return u8_array;\n};*/\n\n/**\n * Resets all the values used for calculations\n * @param {None}.\n * @return {None}.\n */\n\nPassOff.prototype.clearPassPhrase = function () {\n    \"use strict\";\n\n    this.passPhrase = zeroVar(this.passPhrase);\n    this.passPhrase = \"\";\n};\n/**\n * Runs the generation of a password by generating a key (PBKDF2) and then using that key to sign (HMAC256) the constructed domain value\n * @param {String} the password type to generate\n * @return {Promise} a promise which will resolve the generated password.\n */\n\nPassOff.prototype.generatePassword = function (passwordType) {\n    \"use strict\";\n\n    var t0 = performance.now();\n    var passNS;\n\n    if (this.fullName.length === 0) {\n        return Promise.reject(new Error(\"Name not present\"));\n    }\n\n    if (this.passPhrase.length === 0) {\n        return Promise.reject(new Error(\"Passphrase not present\"));\n    }\n\n    if (this.domainName.length === 0) {\n        return Promise.reject(new Error(\"Domain name not present\"));\n    }\n\n    if (passwordType === \"answer\" && this.securityQuestion.length === 0) {\n        return Promise.reject(new Error(\"Security question not present\"));\n    }\n\n\n    try {\n        var passOffContext = this;\n\n        //return promise which resolves to the generated password\n        return new Promise(function (resolve, reject) {\n\n            passNS = passOffContext.passwordNS;\n\n            if (passwordType === \"answer\") {\n                passNS = passOffContext.answerNS;\n            } else if (passwordType == \"login\") {\n                passNS = passOffContext.loginNS;\n            }\n\n            //Set up parameters for PBKDF2 and HMAC functions\n            var fullNameValue = passOffContext.fullName.trim().toLowerCase();\n            var salt = passNS + \".\" + fullNameValue;\n            var userNameValue = passOffContext.userName.trim().toLowerCase();\n            var posDomain = 0;\n            var domainElements;\n            var domainCountryCode = \"\";\n\n            /*Retrieve domain value and trim the leading http:// or https:// */\n            var domainValue = passOffContext.domainName.replace(/^https?:\\/\\//g, \"\").toLowerCase();\n\n            /* trim of any www prefix, eg 'www.'  , 'www1.', 'www-87.' */\n            //domainValue = domainValue.replace(/^www*./g, \"\").trim();\n\n\n            //Check whether the whole URL is there - remove anything with a '/' onwards\n            posDomain = domainValue.indexOf(\"/\");\n            if (posDomain > 0) {\n                domainValue = domainValue.substr(0, posDomain);\n            }\n\n            //Split base domain into its individual elements\n            domainElements = domainValue.split(\".\");\n\n            //Check whether the last domain element is a country code suffix, eg mrpeeel.com.au\n            if (domainElements.length > 1 && passOffContext.countryTLDs.indexOf(domainElements[domainElements.length - 1]) >= 0) {\n                //Save the country code and remove from domain elements array\n                domainCountryCode = \".\" + domainElements[domainElements.length - 1];\n                domainElements = domainElements.slice(0, -1);\n            }\n\n            //if there are more than 2 elements remaining, only keep the last two\n            //eg photos.google.com = google.com, mail.google.com = google.com\n            if (domainElements.length > 2) {\n                domainElements = domainElements.slice(-2);\n            }\n\n            //Re-assemble base domain into final value with country code\n            domainValue = domainElements.join(\".\") + domainCountryCode;\n\n            var securityQuestionValue = \"\";\n\n            //If  a specific user has been specified, then add to domain value\n            if (userNameValue && userNameValue.length > 0) {\n                domainValue = userNameValue + \"@\" + domainValue;\n            }\n\n            //For an answer, add the security question to domain value\n\n            if (passwordType === \"answer\") {\n                //Strip out any punctuation or multiple spaces and convert to lower case \n                securityQuestionValue = passOffContext.securityQuestion.replace(/[.,-\\/#!$%\\^&\\*;:{}=\\-_`~()?'\"]/g, \"\").replace(/  +/g, ' ').trim().toLowerCase();\n                domainValue = domainValue + \":\" + securityQuestionValue;\n            }\n\n\n\n            //parameters: password, salt, numIterations, keyLength\n            return PBKDF2(passOffContext.passPhrase, salt, 750, 128)\n                .then(function (key) {\n                    //console.log(\"Derived key: \" + key);\n\n                    return HMACSHA256(domainValue, key);\n                    /*}).then(function (seed) {\n                        //console.log(\"HMAC result seed hex: \" + seed);\n                        var seedArray = passOffContext.convertWordArrayToUint8Array(seed);\n\n                        //console.log(\"HMAC result seed array: \" + seedArray);\n                        //console.log(performance.now() - t0 + \" ms\");\n                        return seedArray;*/\n                }).then(function (seedArray) {\n                    // Find the selected template array\n                    var templateType = passOffContext.templates[passwordType];\n\n                    // Select the specific template based on seed[0]\n                    var template = templateType[seedArray[0] % templateType.length];\n                    //console.log(\"Selected template: \" + template);\n                    //console.log(performance.now() - t0 + \" ms\");\n\n                    // Split the template string\n                    var password = template.split(\"\").map(function (c, i) {\n                        // Use the available passchars to map the template string\n                        // to characters (e.g. c -> bcdfghjklmnpqrstvwxyz)\n                        var chars = passOffContext.passchars[c];\n\n                        // Select the character using seed[i + 1]\n                        return chars[seedArray[i + 1] % chars.length];\n                    }).join(\"\"); /*Re-join as password*/\n                    //console.log(\"Generated password: \" + password);\n                    //console.log(performance.now() - t0 + \" ms\");\n                    //console.log(\"All done\");\n\n                    //Clear seedArray\n                    for (var seedCounter = 0; seedCounter < seedArray.length; seedCounter++) {\n                        seedArray[seedCounter] = 0;\n                    }\n\n\n                    //Clear pass phrase values\n                    passOffContext.clearPassPhrase();\n\n                    resolve(password);\n                })\n                .catch(function (e) {\n                    return Promise.reject(e);\n                });\n\n        });\n\n    } catch (e) {\n        return Promise.reject(e);\n    }\n\n};\n"],"sourceRoot":"/source/"}