{"version":3,"sources":["manager.js","passoff.js"],"names":["clearPassword","hideElement","passwordCard","password","textContent","setPasswordButton","trimDomainName","posDomain","domainName","value","replace","toLowerCase","trim","indexOf","substr","clearValues","passPhrase","passChangeRequiredCount","generatePassword","hidePasswordToggle","showElement","error","fullName","givenName","familyName","length","passwordType","securityQuestion","passOff","userName","then","passwordValue","loaderPassword","populateOrCopyPassword","setPassChangeRequired","err","message","executePasswordCopy","isChromeExtension","generateExtPassword","extHasPassword","passwordCardHeader","successToast","successPrefix","window","setTimeout","showToast","copyPasswordDiv","document","queryCommandSupported","scrollIntoView","copyPasswordToClipboard","thisPasswordTimeStamp","lastPassPhraseLength","lastPassGenTimeStamp","Date","now","changePassPhrase","showPasswordToggle","calculatedDomainName","generatePasswordButton","disabled","element","classList","remove","add","clipboardVal","select","queryCommandEnabled","execCommand","console","log","clearClipboard","chooseType","setType","this","id","passwordSelection","copyPasswordButton","userNameDiv","securityQuestionDiv","passwordToggle","type","togglePasswordView","focus","runTests","open","toastElement","coveredElement","hideToast","PassOff","keyNS","passwordNS","loginNS","answerNS","templates","maximum-password","long-password","medium-password","basic-password","short-password","pin","pin-6","login","answer","passchars","V","C","v","c","A","a","n","o","x"," ","countryTLDs","prototype","PBKDF2","salt","Promise","resolve","reject","derivedKey","CryptoJS","iterations","keySize","HMACSHA256","plainText","key","seed","HmacSHA256","convertWordArrayToUint8Array","wordArray","word","i","len","words","u8_array","Uint8Array","offset","clearPassPhrase","passNS","performance","Error","passOffContext","domainElements","fullNameValue","userNameValue","domainCountryCode","domainValue","split","slice","join","securityQuestionValue","seedArray","templateType","template","map","chars","seedCounter","e","resultType","closePasswordButton","headerKey","addEventListener","applicationCache","status","UPDATEREADY","location","reload","querySelector","lCounter","children"],"mappings":"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","file":"opensesame.min.js","sourcesContent":["/** --------------------------------------------------------------------------------------------------------------\n  This web app uses the application cache - any change requires the passoff.appcache file to be modified.  \n    Modify the timestamp comment in the 2nd line to force browsers to refresh  \n  ----------------------------------------------------------------------------------------------------------------\n*/\n\n/*global PassOff, document, window, console, navigator, isChromeExtension, extHasPassword, generateExtPassword */\n\n//Variables for UI element\nvar givenName, familyName, passPhrase, domainName, securityQuestion, securityQuestionDiv, userName, userNameDiv, type, resultType, generatePasswordButton, password, passwordCard, passwordCardHeader, copyPasswordDiv, loaderPassword, closePasswordButton, copyPasswordButton, clipboardVal, passwordToggle, headerKey, successToast, lastPassGenTimeStamp, successPrefix;\n\n//Variable for calculations\nvar passOff, passwordType, fullName, error, passChangeRequiredCount, lastPassPhraseLength;\n\n\nfunction clearPassword() {\n    hideElement(passwordCard);\n    password.textContent = \"00000000000000000000000000000000000000000000000000000000000000000000000000000\";\n    password.textContent = \"\";\n    setPasswordButton();\n}\n\nfunction trimDomainName() {\n    var posDomain = 0;\n\n    /*Retrieve domain value and trim the leading http:// or https:// */\n    domainName.value = domainName.value.replace(/^https?:\\/\\//g, \"\").toLowerCase().trim();\n\n    //Check whether the whole URL is there - remove anything with a '/' onwards\n    posDomain = domainName.value.indexOf(\"/\");\n    if (posDomain > 0) {\n        domainName.value = domainName.value.substr(0, posDomain);\n    }\n\n}\n\nfunction clearValues() {\n    passPhrase.value = \"00000000000000000000000000000000000000000000000000000000000000000000000000000\";\n    passPhrase.value = \"\";\n    passChangeRequiredCount = 0;\n\n    clearPassword();\n}\n\nfunction generatePassword() {\n\n    hidePasswordToggle();\n\n    showElement(passwordCard);\n    error.textContent = password.textContent = \"\";\n\n    setPasswordButton();\n\n    fullName = givenName.value.trim() + familyName.value.trim();\n\n    if ((fullName === \"\" || passPhrase.value.trim().length === 0) || (passwordType === \"answer\" && securityQuestion.value.trim().length === 0)) {\n        return;\n    }\n\n    if (passwordType === \"answer\" && securityQuestion.value.trim().length === 0) {\n        //Security question must be present to generate an answer\n        return;\n    }\n\n\n    //Reset optional values\n    passOff.userName = \"\";\n    passOff.securityQuestion = \"\";\n\n    //Set values required for calculation\n    passOff.fullName = fullName;\n    passOff.passPhrase = passPhrase.value;\n    passOff.domainName = domainName.value.trim();\n    if (userName.value.trim().length > 0) {\n        passOff.userName = userName.value.trim();\n    }\n\n    if (passwordType === \"answer\" && securityQuestion.value.trim().length > 0) {\n        //Remove any punctuation, remove any consecutive spaces and convert to lower case\n        passOff.securityQuestion = securityQuestion.value.trim();\n    }\n\n    if (passwordType) {\n        passOff.generatePassword(passwordType)\n            .then(function (passwordValue) {\n                password.textContent = passwordValue;\n                hideElement(loaderPassword);\n\n                populateOrCopyPassword();\n\n                setPassChangeRequired();\n\n            })\n            .catch(function (err) {\n                error.textContent = err.message;\n            });\n    }\n\n}\n\nfunction populateOrCopyPassword() {\n    var executePasswordCopy = false;\n\n    //Check if this is running within a Chrome extension and a password or PIN is being generated\n    if (typeof isChromeExtension !== 'undefined') {\n        //Call the extension password set function\n        generateExtPassword();\n\n        //Check whether the extension can directly set the password or PIN and if it the correct type\n        //If password can't be set or it is another type (user name or answer) it will just copy to cliboard instead\n        if (extHasPassword !== true || passwordCardHeader.textContent === \"User name\" || passwordCardHeader.textContent === \"Answer\") {\n            executePasswordCopy = true;\n        } else {\n            //Password will be directly inserted by ext-backgrounf.js, so show a password / pin inserted toast\n            successToast.textContent = successPrefix + \" inserted\";\n            window.setTimeout(function () {\n                showToast(successToast, copyPasswordDiv);\n            }, 250);\n        }\n\n    } else if (document.queryCommandSupported('copy')) {\n        //Not running in an extension so check the copy capability of the browser\n        executePasswordCopy = true;\n    }\n\n    if (executePasswordCopy) {\n        showElement(copyPasswordDiv);\n        password.scrollIntoView();\n        //Copy password to clipboard after 0.2 second\n        window.setTimeout(function () {\n            copyPasswordToClipboard();\n        }, 200);\n\n    }\n\n}\n\nfunction setPassChangeRequired() {\n    var thisPasswordTimeStamp;\n\n    //Set the more changes required to 2 \n    passChangeRequiredCount = 2;\n\n    //Set the length to the current pass phrase length\n    // This is an atttempt to give a little more security - a user can't just type in extra characters to reveal\n    //  the password.  Some of the characters need to be changed (still easy to work around)\n    lastPassPhraseLength = passPhrase.value.length;\n\n    //Set timestamp for last generated password\n    lastPassGenTimeStamp = Date.now();\n    thisPasswordTimeStamp = lastPassGenTimeStamp;\n\n    //Set function to clear passwords after 30 minutes if no other activity has occurred\n    window.setTimeout(function () {\n        //Check of this was the last password generated (timestamp still matches)\n        if (thisPasswordTimeStamp === lastPassGenTimeStamp) {\n            //Too much time has elapsed without any password activity so clear all the values\n            clearValues();\n        }\n    }, 1800000);\n}\n\nfunction changePassPhrase() {\n    clearPassword();\n\n    //Check if the pass phrase needs to be altered before the view toggle can be displayed\n    if (lastPassPhraseLength > 0 && passChangeRequiredCount > 0 && passPhrase.value.length <= lastPassPhraseLength) {\n        passChangeRequiredCount = passChangeRequiredCount - 1;\n    } else if (lastPassPhraseLength === 0 || passChangeRequiredCount === 0) {\n        showPasswordToggle();\n    }\n}\n\nfunction setPasswordButton() {\n\n    /*Retrieve domain value and trim the leading http:// or https://\n    then trim of any www prefix, eg 'www.'  , 'www1.', 'www-87.' */\n    var calculatedDomainName = domainName.value.replace(\"https://\", \"\").replace(\"http://\", \"\").replace(/^www[\\w-]*./g, \"\").trim().toLowerCase();\n\n    //Ignore the start of www.\n    if (calculatedDomainName === \"w\" || calculatedDomainName === \"ww\" || calculatedDomainName === \"www\") {\n        calculatedDomainName = \"\";\n    }\n\n    //Check if minimum values have been completed - all types need name and domain\n    if ((givenName.value.trim().length > 0 || familyName.value.trim().length > 0) && calculatedDomainName.length > 0 &&\n        //For an answer type, a question must also be set \n        (passwordType !== \"answer\" || securityQuestion.value.trim().length > 0)) {\n        generatePasswordButton.disabled = false;\n    } else {\n        generatePasswordButton.disabled = true;\n\n    }\n    hideElement(copyPasswordDiv);\n}\n\nfunction showElement(element) {\n    element.classList.remove(\"hidden\");\n}\n\nfunction hideElement(element) {\n    element.classList.add(\"hidden\");\n}\n\n\nfunction copyPasswordToClipboard() {\n    clipboardVal.value = password.textContent;\n    clipboardVal.select();\n\n    if (document.queryCommandEnabled('copy')) {\n\n        try {\n            // Now that we've selected the anchor text, execute the copy command  \n            var successful = document.execCommand('copy');\n            successToast.textContent = successPrefix + \" copied to Clipboard\";\n            showToast(successToast, copyPasswordDiv);\n\n        } catch (err) {\n            console.log(\"Copy command failed\");\n        }\n    } else {\n        console.log(\"Copy command not enabled\");\n    }\n}\n\nfunction clearClipboard() {\n    clipboardVal.value = \"Value cleared\";\n    clipboardVal.select();\n    if (document.queryCommandSupported('copy')) {\n\n        try {\n            var successful = document.execCommand('copy');\n        } catch (err) {\n            console.log(\"Copy command failed\");\n        }\n    } else {\n        console.log(\"Copy command not enabled\");\n    }\n\n}\n\nfunction chooseType() {\n    setType(this.id);\n}\n\nfunction setType(passwordSelection) {\n    copyPasswordButton.textContent = \"Copy Password\";\n    successPrefix = \"Password\";\n    passwordCardHeader.textContent = \"Password\";\n    showElement(userNameDiv);\n    hideElement(securityQuestionDiv);\n    passwordType = passwordSelection;\n\n\n    switch (passwordSelection) {\n        case \"login\":\n            generatePasswordButton.textContent = \"Generate User name\";\n            copyPasswordButton.textContent = \"Copy User name\";\n            successPrefix = \"User name\";\n            passwordCardHeader.textContent = \"User name\";\n            hideElement(userNameDiv);\n            break;\n        case \"maximum-password\":\n            generatePasswordButton.textContent = \"Generate Maximum Password\";\n            break;\n        case \"long-password\":\n            generatePasswordButton.textContent = \"Generate Long Password\";\n            break;\n        case \"medium-password\":\n            generatePasswordButton.textContent = \"Generate Medium Password\";\n            break;\n        case \"basic-password\":\n            generatePasswordButton.textContent = \"Generate Basic Password\";\n            break;\n        case \"short-password\":\n            generatePasswordButton.textContent = \"Generate Short Password\";\n            break;\n        case \"pin\":\n            generatePasswordButton.textContent = \"Generate Four Digit PIN\";\n            copyPasswordButton.textContent = \"Copy PIN\";\n            successPrefix = \"PIN\";\n            passwordCardHeader.textContent = \"PIN\";\n            break;\n        case \"pin-6\":\n            generatePasswordButton.textContent = \"Generate Six Digit PIN\";\n            copyPasswordButton.textContent = \"Copy PIN\";\n            successPrefix = \"PIN\";\n            passwordCardHeader.textContent = \"PIN\";\n            break;\n        case \"answer\":\n            generatePasswordButton.textContent = \"Generate Security Answer\";\n            copyPasswordButton.textContent = \"Copy Security Answer\";\n            successPrefix = \"Answer\";\n            passwordCardHeader.textContent = \"Answer\";\n            showElement(securityQuestionDiv);\n            break;\n    }\n\n    clearPassword();\n}\n\nfunction showPasswordToggle() {\n    // Once a pass phrase has been used to generate a values, make sure that it can't be re-displayed\n    //  until at least 3 changes are applied.\n    // This is not providing much security but it at least stops someone displaying the exact pass phrase  \n    //  which was just used.\n    if (passChangeRequiredCount === 0) {\n        showElement(passwordToggle);\n    }\n}\n\nfunction hidePasswordToggle() {\n    hideElement(passwordToggle);\n    passPhrase.type = \"password\";\n}\n\nfunction togglePasswordView() {\n    //Toggle pass phrase between visible as a text area, and obscured like a normal password\n    if (passPhrase.type === \"password\") {\n        passPhrase.type = \"text-area\";\n    } else {\n        passPhrase.type = \"password\";\n    }\n\n    passPhrase.focus();\n\n}\n\nfunction runTests() {\n    window.open(\"test/opensesame-test.html\");\n}\n\n\nfunction showToast(toastElement, coveredElement) {\n    //Show toast element\n    hideElement(coveredElement);\n    showElement(toastElement);\n\n    toastElement.scrollIntoView();\n    //Hide again after 5 seconds\n    window.setTimeout(function () {\n        hideToast(toastElement, coveredElement);\n    }, 5200);\n}\n\nfunction hideToast(toastElement, coveredElement) {\n\n    showElement(coveredElement);\n    hideElement(toastElement);\n\n\n}\n\nwindow.addEventListener(\"load\", function () {\n\n    window.applicationCache.addEventListener('updateready', function (e) {\n        if (window.applicationCache.status == window.applicationCache.UPDATEREADY) {\n            // Browser downloaded a new app cache.\n            window.location.reload();\n        }\n    }, false);\n\n    passOff = new PassOff();\n\n    headerKey = document.querySelector(\"[id=header-key]\");\n    givenName = document.querySelector(\"[id=given-name]\");\n    familyName = document.querySelector(\"[id=family-name]\");\n    passPhrase = document.querySelector(\"[id=passphrase]\");\n    passwordToggle = document.querySelector(\"[id=show-password]\");\n    generatePasswordButton = document.querySelector(\"[id=generate-password]\");\n    domainName = document.querySelector(\"[id=domain]\");\n    securityQuestion = document.querySelector(\"[id=security-question]\");\n    securityQuestionDiv = document.querySelector(\"[id=security-question-div]\");\n    userName = document.querySelector(\"[id=user-name]\");\n    userNameDiv = document.querySelector(\"[id=user-name-div]\");\n    type = document.querySelector(\"[id=type]\");\n    passwordCard = document.querySelector(\"[id=password-card]\");\n    passwordCardHeader = document.querySelector(\"[id=password-card-header]\");\n    password = document.querySelector(\".password\");\n    clipboardVal = document.querySelector(\"[id=clipboard-value]\");\n    error = document.querySelector(\".error\");\n    successToast = document.querySelector(\"[id=success-toast]\");\n    copyPasswordButton = document.querySelector(\"[id=copy-password]\");\n    copyPasswordDiv = document.querySelector(\"[id=copy-password-div]\");\n    loaderPassword = document.querySelector(\"[id=load-bar-ball]\");\n    closePasswordButton = document.querySelector(\"[id=close-password]\");\n\n    givenName.disabled = familyName.disabled = passPhrase.disabled = domainName.disabled = userName.disabled = type.disabled = false;\n\n    givenName.addEventListener(\"input\", clearPassword, false);\n    givenName.addEventListener(\"focus\", hidePasswordToggle, false);\n    givenName.addEventListener(\"focusin\", hidePasswordToggle, false);\n    familyName.addEventListener(\"input\", clearPassword, false);\n    familyName.addEventListener(\"focus\", hidePasswordToggle, false);\n    familyName.addEventListener(\"focusin\", hidePasswordToggle, false);\n    passPhrase.addEventListener(\"input\", changePassPhrase, false);\n    passPhrase.addEventListener(\"focus\", showPasswordToggle, false);\n    passPhrase.addEventListener(\"focusin\", showPasswordToggle, false);\n    securityQuestion.addEventListener(\"input\", clearPassword, false);\n    securityQuestion.addEventListener(\"focus\", hidePasswordToggle, false);\n    securityQuestion.addEventListener(\"focusin\", hidePasswordToggle, false);\n    domainName.addEventListener(\"input\", clearPassword, false);\n    domainName.addEventListener(\"focus\", hidePasswordToggle, false);\n    domainName.addEventListener(\"focusin\", hidePasswordToggle, false);\n    domainName.addEventListener(\"focusout\", trimDomainName, false);\n    domainName.addEventListener(\"blur\", trimDomainName, false);\n    userName.addEventListener(\"input\", clearPassword, false);\n    userName.addEventListener(\"focus\", hidePasswordToggle, false);\n    userName.addEventListener(\"focusin\", hidePasswordToggle, false);\n\n    //Loop through different values and add a listener\n    for (var lCounter = 0; lCounter < type.children.length; lCounter++) {\n        type.children[lCounter].addEventListener(\"click\", chooseType, false);\n    }\n\n\n    //Set the number of changes required to view a password to 0\n    passChangeRequiredCount = 0;\n    lastPassPhraseLength = 0;\n\n    //Set initial type\n    setType(\"long-password\");\n    headerKey.addEventListener(\"click\", runTests, false);\n    generatePasswordButton.addEventListener(\"click\", generatePassword, false);\n    passwordToggle.addEventListener(\"click\", togglePasswordView, false);\n    copyPasswordButton.addEventListener(\"click\", copyPasswordToClipboard, false);\n    closePasswordButton.addEventListener(\"click\", clearPassword, false);\n\n    givenName.focus();\n\n}, false);\n","/** --------------------------------------------------------------------------------------------------------------\n  This web app uses the application cache - any change requires the passoff.appcache file to be modified.  \n    Modify the timestamp comment in the 2nd line to force browsers to refresh  \n  ----------------------------------------------------------------------------------------------------------------\n*/\n/** Set up global types so JSHint doesn't trigger warnings that they are not defined */\n\n/*global CryptoJS, Promise, performance, console, Uint8Array */\n\n/** \n * Passoff class encapsulating the functionality for generating a password.\n * Calls the CyrptoJS library for PBKDF2 to generate salted password and HMAC256 for generating seed\n */\nvar PassOff = function () {\n    \"use strict\";\n\n    // The namespace used in calculateKey\n    this.keyNS = \"cake.man.passoff\";\n\n    // The namespaces used in calculateSeed\n    this.passwordNS = \"cake.man.passoff.password\";\n    this.loginNS = \"cake.man.passoff.login\";\n    this.answerNS = \"cake.man.passoff.answer\";\n\n    //The values which will be populated for creating the password\n    this.fullName = '';\n    this.passPhrase = '';\n    this.domainName = '';\n    this.userName = '';\n    this.securityQuestion = '';\n\n\n    // The templates that passwords may be created from\n    // The characters map to MPW.passchars\n    this.templates = {\n        \"maximum-password\": [\n\t\t\"anoxxxxxxxxxxxxxxxxx\",\n\t\t\"axxxxxxxxxxxxxxxxxno\"\n\t],\n        \"long-password\": [\n\t\t\"CvcvnoCvcvCvcv\",\n\t\t\"CvcvCvcvnoCvcv\",\n\t\t\"CvcvCvcvCvcvno\",\n\t\t\"CvccnoCvcvCvcv\",\n\t\t\"CvccCvcvnoCvcv\",\n\t\t\"CvccCvcvCvcvno\",\n\t\t\"CvcvnoCvccCvcv\",\n\t\t\"CvcvCvccnoCvcv\",\n\t\t\"CvcvCvccCvcvno\",\n\t\t\"CvcvnoCvcvCvcc\",\n\t\t\"CvcvCvcvnoCvcc\",\n\t\t\"CvcvCvcvCvccno\",\n\t\t\"CvccnoCvccCvcv\",\n\t\t\"CvccCvccnoCvcv\",\n\t\t\"CvccCvccCvcvno\",\n\t\t\"CvcvnoCvccCvcc\",\n\t\t\"CvcvCvccnoCvcc\",\n\t\t\"CvcvCvccCvccno\",\n\t\t\"CvccnoCvcvCvcc\",\n\t\t\"CvccCvcvnoCvcc\",\n\t\t\"CvccCvcvCvccno\"\n\t],\n        \"medium-password\": [\n\t\t\"CvcnoCvc\",\n\t\t\"CvcCvcno\"\n\t],\n        \"basic-password\": [\n\t\t\"aaanaaan\",\n\t\t\"aannaaan\",\n\t\t\"aaannaaa\"\n\t],\n        \"short-password\": [\n\t\t\"Cvcn\"\n\t],\n        pin: [\n\t\t\"nnnn\"\n\t],\n        \"pin-6\": [\n\t\t\"nnnnnn\"\n\t],\n        login: [\n\t\t\"cvccvcvcv\"\n\t],\n        answer: [\n\t\t\"cvcc cvc cvccvcv cvc\",\n\t\t\"cvc cvccvcvcv cvcv\",\n\t\t\"cv cvccv cvc cvcvccv\"\n\t]\n    };\n\n    // The password character mapping\n    // c in template becomes bcdfghjklmnpqrstvwxyz\n    this.passchars = {\n        V: \"AEIOU\",\n        C: \"BCDFGHJKLMNPQRSTVWXYZ\",\n        v: \"aeiou\",\n        c: \"bcdfghjklmnpqrstvwxyz\",\n        A: \"AEIOUBCDFGHJKLMNPQRSTVWXYZ\",\n        a: \"AEIOUaeiouBCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\",\n        n: \"0123456789\",\n        o: \"@&%?,=[]_:-+*$#!'^~;()/.\",\n        x: \"AEIOUaeiouBCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz0123456789!@#$%^&*()\",\n        \" \": \" \"\n    };\n\n    // All the country top level domain suffixes - used for determining the domain from a URL\n    // N.B. \".io\" has been excluded becuase it is used like .com, eg github.io \n    this.countryTLDs = [\"ac\", \"ad\", \"ae\", \"af\", \"ag\", \"ai\", \"al\", \"am\", \"an\", \"ao\", \"aq\", \"ar\", \"as\", \"at\", \"au\", \"aw\", \"ax\", \"az\", \"ba\",\n                        \"bb\", \"bd\", \"be\", \"bf\", \"bg\", \"bh\", \"bi\", \"bj\", \"bm\", \"bn\", \"bo\", \"br\", \"bs\", \"bt\", \"bv\", \"bw\", \"by\", \"bz\", \"ca\",\n                        \"cc\", \"cd\", \"cf\", \"cg\", \"ch\", \"ci\", \"ck\", \"cl\", \"cm\", \"cn\", \"co\", \"cr\", \"cs\", \"cu\", \"cv\", \"cw\", \"cx\", \"cy\", \"cz\",\n                        \"dd\", \"de\", \"dj\", \"dk\", \"dm\", \"do\", \"dz\", \"ec\", \"ee\", \"eg\", \"eh\", \"er\", \"es\", \"et\", \"eu\", \"fi\", \"fj\", \"fk\", \"fm\",\n                        \"fo\", \"fr\", \"ga\", \"gb\", \"gd\", \"ge\", \"gf\", \"gg\", \"gh\", \"gi\", \"gl\", \"gm\", \"gn\", \"gp\", \"gq\", \"gr\", \"gs\", \"gt\", \"gu\",\n                        \"gw\", \"gy\", \"hk\", \"hm\", \"hn\", \"hr\", \"ht\", \"hu\", \"id\", \"ie\", \"il\", \"im\", \"in\", /*\"io\",*/ \"iq\", \"ir\", \"is\", \"it\", \"je\",\n                        \"jm\", \"jo\", \"jp\", \"ke\", \"kg\", \"kh\", \"ki\", \"km\", \"kn\", \"kp\", \"kr\", \"kw\", \"ky\", \"kz\", \"la\", \"lb\", \"lc\", \"li\", \"lk\",\n                        \"lr\", \"ls\", \"lt\", \"lu\", \"lv\", \"ly\", \"ma\", \"mc\", \"md\", \"me\", \"mg\", \"mh\", \"mk\", \"ml\", \"mm\", \"mn\", \"mo\", \"mp\", \"mq\",\n                        \"mr\", \"ms\", \"mt\", \"mu\", \"mv\", \"mw\", \"mx\", \"my\", \"mz\", \"na\", \"nc\", \"ne\", \"nf\", \"ng\", \"ni\", \"nl\", \"no\", \"np\", \"nr\",\n                        \"nu\", \"nz\", \"om\", \"pa\", \"pe\", \"pf\", \"pg\", \"ph\", \"pk\", \"pl\", \"pm\", \"pn\", \"pr\", \"ps\", \"pt\", \"pw\", \"py\", \"qa\", \"re\",\n                        \"ro\", \"rs\", \"ru\", \"rw\", \"sa\", \"sb\", \"sc\", \"sd\", \"se\", \"sg\", \"sh\", \"si\", \"sj\", \"sk\", \"sl\", \"sm\", \"sn\", \"so\", \"sr\",\n                        \"ss\", \"st\", \"su\", \"sv\", \"sx\", \"sy\", \"sz\", \"tc\", \"td\", \"tf\", \"tg\", \"th\", \"tj\", \"tk\", \"tl\", \"tm\", \"tn\", \"to\", \"tp\",\n                        \"tr\", \"tt\", \"tv\", \"tw\", \"tz\", \"ua\", \"ug\", \"uk\", \"us\", \"uy\", \"uz\", \"va\", \"vc\", \"ve\", \"vg\", \"vi\", \"vn\", \"vu\", \"wf\",\n                        \"ws\", \"ye\", \"yt\", \"yu\", \"za\", \"zm\", \"zw\"];\n\n};\n\n/**\n * Wraps the CryptoJS PBKDF2 function in a promise and returns a key\n * @param {Object} queryParams The request parameters.\n * @return {Promise} A promise.\n */\nPassOff.prototype.PBKDF2 = function (password, salt) {\n    \"use strict\";\n\n    return new Promise(function (resolve, reject) {\n        var derivedKey = CryptoJS.PBKDF2(password, salt, {\n            iterations: 750,\n            keySize: 128 / 32\n        });\n\n        resolve(derivedKey);\n    });\n\n};\n\n/**\n * Wraps the CryptoJS HMAC256 function in a promise and returns signed data as a word array\n * @param {Object} queryParams The request parameters.\n * @return {Promise} A promise.\n */\n\nPassOff.prototype.HMACSHA256 = function (plainText, key) {\n    \"use strict\";\n\n    return new Promise(function (resolve, reject) {\n        var seed = CryptoJS.HmacSHA256(plainText, key);\n\n        resolve(seed);\n    });\n\n};\n\n/**\n * Converts a word array into a Uint8Array to convert to use as a numeric array. \n * Assumes wordArray is Big-Endian (because it comes from CryptoJS which is all BE)\n * @param {word array} wordArray .\n * @return {Uint8Array}.\n */\nPassOff.prototype.convertWordArrayToUint8Array = function (wordArray) {\n    \"use strict\";\n\n    var len = wordArray.words.length,\n        u8_array = new Uint8Array(len << 2),\n        offset = 0,\n        word, i;\n\n    for (i = 0; i < len; i++) {\n        word = wordArray.words[i];\n        u8_array[offset++] = word >> 24;\n        u8_array[offset++] = (word >> 16) & 0xff;\n        u8_array[offset++] = (word >> 8) & 0xff;\n        u8_array[offset++] = word & 0xff;\n    }\n\n    return u8_array;\n};\n\n/**\n * Resets all the values used for calculations\n * @param {None}.\n * @return {None}.\n */\n\nPassOff.prototype.clearPassPhrase = function (wordArray) {\n    \"use strict\";\n\n    this.passPhrase = \"00000000000000000000000000000000000000000000000000000000000000000000000000000\";\n    this.passPhrase = \"\";\n};\n/**\n * Runs the generation of a password by generating a key (PBKDF2) and then using that key to sign (HMAC256) the constructed domain value\n * @param {String} the password type to generate\n * @return {Promise} a promise which will resolve the generated password.\n */\n\nPassOff.prototype.generatePassword = function (passwordType) {\n    \"use strict\";\n\n    var t0 = performance.now();\n    var passNS;\n\n    if (this.fullName.length === 0) {\n        return Promise.reject(new Error(\"Name not present\"));\n    }\n\n    if (this.passPhrase.length === 0) {\n        return Promise.reject(new Error(\"Passphrase not present\"));\n    }\n\n    if (this.domainName.length === 0) {\n        return Promise.reject(new Error(\"Domain name not present\"));\n    }\n\n    if (passwordType === \"answer\" && this.securityQuestion.length === 0) {\n        return Promise.reject(new Error(\"Security question not present\"));\n    }\n\n\n    try {\n        var passOffContext = this;\n\n        //return promise which resolves to the generated password\n        return new Promise(function (resolve, reject) {\n\n            passNS = passOffContext.passwordNS;\n\n            if (passwordType === \"answer\") {\n                passNS = passOffContext.answerNS;\n            } else if (passwordType == \"login\") {\n                passNS = passOffContext.loginNS;\n            }\n\n            //Set up parameters for PBKDF2 and HMAC functions\n            var fullNameValue = passOffContext.fullName.trim().toLowerCase();\n            var salt = passNS + \".\" + fullNameValue;\n            var userNameValue = passOffContext.userName.trim().toLowerCase();\n            var posDomain = 0;\n            var domainElements;\n            var domainCountryCode = \"\";\n\n            /*Retrieve domain value and trim the leading http:// or https:// */\n            var domainValue = passOffContext.domainName.replace(/^https?:\\/\\//g, \"\").toLowerCase();\n\n            /* trim of any www prefix, eg 'www.'  , 'www1.', 'www-87.' */\n            //domainValue = domainValue.replace(/^www*./g, \"\").trim();\n\n\n            //Check whether the whole URL is there - remove anything with a '/' onwards\n            posDomain = domainValue.indexOf(\"/\");\n            if (posDomain > 0) {\n                domainValue = domainValue.substr(0, posDomain);\n            }\n\n            //Split base domain into its individual elements\n            domainElements = domainValue.split(\".\");\n\n            //Check whether the last domain element is a country code suffix, eg mrpeeel.com.au\n            if (domainElements.length > 1 && passOffContext.countryTLDs.indexOf(domainElements[domainElements.length - 1]) >= 0) {\n                //Save the country code and remove from domain elements array\n                domainCountryCode = \".\" + domainElements[domainElements.length - 1];\n                domainElements = domainElements.slice(0, -1);\n            }\n\n            //if there are more than 2 elements remaining, only keep the last two\n            //eg photos.google.com = google.com, mail.google.com = google.com\n            if (domainElements.length > 2) {\n                domainElements = domainElements.slice(-2);\n            }\n\n            //Re-assemble base domain into final value with country code\n            domainValue = domainElements.join(\".\") + domainCountryCode;\n\n            var securityQuestionValue = \"\";\n\n            //If  a specific user has been specified, then add to domain value\n            if (userNameValue && userNameValue.length > 0) {\n                domainValue = userNameValue + \"@\" + domainValue;\n            }\n\n            //For an answer, add the security question to domain value\n\n            if (passwordType === \"answer\") {\n                //Strip out any punctuation or multiple spaces and convert to lower case \n                securityQuestionValue = passOffContext.securityQuestion.replace(/[.,-\\/#!$%\\^&\\*;:{}=\\-_`~()?'\"]/g, \"\").replace(/  +/g, ' ').trim().toLowerCase();\n                domainValue = domainValue + \":\" + securityQuestionValue;\n            }\n\n\n            return passOffContext.PBKDF2(passOffContext.passPhrase, salt)\n                .then(function (key) {\n                    //console.log(\"Derived key: \" + key);\n\n                    return passOffContext.HMACSHA256(domainValue, key);\n                }).then(function (seed) {\n                    //console.log(\"HMAC result seed hex: \" + seed);\n                    var seedArray = passOffContext.convertWordArrayToUint8Array(seed);\n\n                    //console.log(\"HMAC result seed array: \" + seedArray);\n                    //console.log(performance.now() - t0 + \" ms\");\n                    return seedArray;\n                }).then(function (seedArray) {\n                    // Find the selected template array\n                    var templateType = passOffContext.templates[passwordType];\n\n                    // Select the specific template based on seed[0]\n                    var template = templateType[seedArray[0] % templateType.length];\n                    //console.log(\"Selected template: \" + template);\n                    //console.log(performance.now() - t0 + \" ms\");\n\n                    // Split the template string\n                    var password = template.split(\"\").map(function (c, i) {\n                        // Use the available passchars to map the template string\n                        // to characters (e.g. c -> bcdfghjklmnpqrstvwxyz)\n                        var chars = passOffContext.passchars[c];\n\n                        // Select the character using seed[i + 1]\n                        return chars[seedArray[i + 1] % chars.length];\n                    }).join(\"\"); /*Re-join as password*/\n                    //console.log(\"Generated password: \" + password);\n                    //console.log(performance.now() - t0 + \" ms\");\n                    //console.log(\"All done\");\n\n                    //Clear seedArray\n                    for (var seedCounter = 0; seedCounter < seedArray.length; seedCounter++) {\n                        seedArray[seedCounter] = 0;\n                    }\n\n\n                    //Clear pass phrase values\n                    passOffContext.clearPassPhrase();\n\n                    resolve(password);\n                })\n                .catch(function (e) {\n                    return Promise.reject(e);\n                });\n\n        });\n\n    } catch (e) {\n        return Promise.reject(e);\n    }\n\n};\n"],"sourceRoot":"/source/"}